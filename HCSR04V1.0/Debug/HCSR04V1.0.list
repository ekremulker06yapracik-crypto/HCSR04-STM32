
HCSR04V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006490  08006490  00007490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006548  08006548  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006550  08006550  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006558  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  080065c0  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080065c0  0000831c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012669  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002528  00000000  00000000  0001a701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001cc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cff  00000000  00000000  0001dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002716d  00000000  00000000  0001e9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a1d  00000000  00000000  00045b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd6f4  00000000  00000000  00058561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  00155c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0015ac34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006478 	.word	0x08006478

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006478 	.word	0x08006478

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <delay_us>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_us(uint16_t us)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
    // Bu fonksiyon, SystemCoreClock değerinizin doğru olduğundan emin olun.
    // Varsayılan 72MHz için her döngü yaklaşık 13.8 ns sürer.
    // 10us gibi kısa gecikmeler için bu "busy-wait" yaklaşımı yaygındır.
    uint32_t cycles = (SystemCoreClock / 1000000U) * us;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <delay_us+0x38>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <delay_us+0x3c>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	88fa      	ldrh	r2, [r7, #6]
 8000e40:	fb02 f303 	mul.w	r3, r2, r3
 8000e44:	60fb      	str	r3, [r7, #12]
    while (cycles--);
 8000e46:	bf00      	nop
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	60fa      	str	r2, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1fa      	bne.n	8000e48 <delay_us+0x20>
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	20000000 	.word	0x20000000
 8000e64:	431bde83 	.word	0x431bde83

08000e68 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7f1b      	ldrb	r3, [r3, #28]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d17b      	bne.n	8000f70 <HAL_TIM_IC_CaptureCallback+0x108>
    {
        if (Is_first_captured == 0) // İlk yakalama: Yükselen kenar
 8000e78:	4b41      	ldr	r3, [pc, #260]	@ (8000f80 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11a      	bne.n	8000eb8 <HAL_TIM_IC_CaptureCallback+0x50>
        {
            IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e82:	2100      	movs	r1, #0
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f002 fdf9 	bl	8003a7c <HAL_TIM_ReadCapturedValue>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e8e:	6013      	str	r3, [r2, #0]
            Is_first_captured = 1;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
            // Bir sonraki yakalama için düşen kenarı bekle
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6a1a      	ldr	r2, [r3, #32]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 020a 	bic.w	r2, r2, #10
 8000ea4:	621a      	str	r2, [r3, #32]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0202 	orr.w	r2, r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);

            // htim1.Instance->SR &= ~(TIM_SR_CC1IF); // Bu satır genellikle HAL tarafından yönetilir, isteğe bağlı olarak bırakılabilir.
        }
    }
}
 8000eb6:	e05b      	b.n	8000f70 <HAL_TIM_IC_CaptureCallback+0x108>
            IC_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f002 fdde 	bl	8003a7c <HAL_TIM_ReadCapturedValue>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a31      	ldr	r2, [pc, #196]	@ (8000f88 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ec4:	6013      	str	r3, [r2, #0]
            if (IC_val2 >= IC_val1)
 8000ec6:	4b30      	ldr	r3, [pc, #192]	@ (8000f88 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d307      	bcc.n	8000ee2 <HAL_TIM_IC_CaptureCallback+0x7a>
                difference = IC_val2 - IC_val1;
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f88 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f84 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	4a2b      	ldr	r2, [pc, #172]	@ (8000f8c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e00b      	b.n	8000efa <HAL_TIM_IC_CaptureCallback+0x92>
                difference = (htim->Instance->ARR - IC_val1) + IC_val2 + 1;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ee8:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	1ad2      	subs	r2, r2, r3
 8000eee:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a25      	ldr	r2, [pc, #148]	@ (8000f8c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000ef8:	6013      	str	r3, [r2, #0]
            Distance = (float)(difference * 0.0343) / 2.0;
 8000efa:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb20 	bl	8000544 <__aeabi_ui2d>
 8000f04:	a31c      	add	r3, pc, #112	@ (adr r3, 8000f78 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f7ff fb95 	bl	8000638 <__aeabi_dmul>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fda1 	bl	8000a5c <__aeabi_d2f>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fb33 	bl	8000588 <__aeabi_f2d>
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f2a:	f7ff fcaf 	bl	800088c <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f7ff fd91 	bl	8000a5c <__aeabi_d2f>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f3e:	6013      	str	r3, [r2, #0]
            Is_first_captured = 0; // Bir sonraki ölçüm için bayrağı sıfırla
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
            Data_Ready = 1;        // Yeni verinin hazır olduğunu belirt
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6a1a      	ldr	r2, [r3, #32]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 020a 	bic.w	r2, r2, #10
 8000f5a:	621a      	str	r2, [r3, #32]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6a12      	ldr	r2, [r2, #32]
 8000f66:	621a      	str	r2, [r3, #32]
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f002 f9c8 	bl	8003300 <HAL_TIM_IC_Stop_IT>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	04816f00 	.word	0x04816f00
 8000f7c:	3fa18fc5 	.word	0x3fa18fc5
 8000f80:	200001bc 	.word	0x200001bc
 8000f84:	200001b0 	.word	0x200001b0
 8000f88:	200001b4 	.word	0x200001b4
 8000f8c:	200001b8 	.word	0x200001b8
 8000f90:	200001c0 	.word	0x200001c0
 8000f94:	200001c4 	.word	0x200001c4

08000f98 <HCSR04_Trigger>:

void HCSR04_Trigger(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    // Tetikleme pininin başlangıçta düşük olduğundan emin olun
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4814      	ldr	r0, [pc, #80]	@ (8000ff4 <HCSR04_Trigger+0x5c>)
 8000fa2:	f000 ff67 	bl	8001e74 <HAL_GPIO_WritePin>
    delay_us(2); // Temiz bir düşük darbe sağlamak için kısa gecikme
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f7ff ff3e 	bl	8000e28 <delay_us>

    // 10us'lik YÜKSEK darbe gönder
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <HCSR04_Trigger+0x5c>)
 8000fb2:	f000 ff5f 	bl	8001e74 <HAL_GPIO_WritePin>
    delay_us(10); // 10 us darbe süresi
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f7ff ff36 	bl	8000e28 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <HCSR04_Trigger+0x5c>)
 8000fc2:	f000 ff57 	bl	8001e74 <HAL_GPIO_WritePin>

    // ECHO pini için giriş yakalamayı başlat
    // Bu, yükselen ve düşen kenarları yakalamak için kesmeyi etkinleştirir.
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	480b      	ldr	r0, [pc, #44]	@ (8000ff8 <HCSR04_Trigger+0x60>)
 8000fca:	f002 f849 	bl	8003060 <HAL_TIM_IC_Start_IT>
    // Yeni bir ölçüme başlarken ilk yakalama bayrağını sıfırla
    Is_first_captured = 0;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HCSR04_Trigger+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
    // Polaritenin ilk olarak yükselen kenarı yakalamak için RISING olarak ayarlandığından emin ol
    __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <HCSR04_Trigger+0x60>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a1a      	ldr	r2, [r3, #32]
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <HCSR04_Trigger+0x60>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 020a 	bic.w	r2, r2, #10
 8000fe2:	621a      	str	r2, [r3, #32]
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <HCSR04_Trigger+0x60>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HCSR04_Trigger+0x60>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6a12      	ldr	r2, [r2, #32]
 8000fee:	621a      	str	r2, [r3, #32]
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	20000084 	.word	0x20000084
 8000ffc:	200001bc 	.word	0x200001bc

08001000 <__io_putchar>:

int __io_putchar(int ch)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001008:	1d39      	adds	r1, r7, #4
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	2201      	movs	r2, #1
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <__io_putchar+0x20>)
 8001012:	f003 fbf9 	bl	8004808 <HAL_UART_Transmit>
    return ch;
 8001016:	687b      	ldr	r3, [r7, #4]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000011c 	.word	0x2000011c

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f000 fbff 	bl	800182a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f82e 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 f978 	bl	8001324 <MX_GPIO_Init>
  MX_TIM1_Init(); // TIM1'i Input Capture için başlatır
 8001034:	f000 f876 	bl	8001124 <MX_TIM1_Init>
  MX_TIM2_Init(); // TIM2 PWM için (bu projede doğrudan HCSR04 için kullanılmıyor)
 8001038:	f000 f8ce 	bl	80011d8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800103c:	f000 f926 	bl	800128c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("HC-SR04 Mesafe Ölçüm Sistemi Başlatıldı!\r\n");
 8001040:	480e      	ldr	r0, [pc, #56]	@ (800107c <main+0x58>)
 8001042:	f004 fbb7 	bl	80057b4 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Sensörü tetikle ve ölçümün tamamlanmasını bekle
    HCSR04_Trigger();
 8001046:	f7ff ffa7 	bl	8000f98 <HCSR04_Trigger>

    while (!Data_Ready);
 800104a:	bf00      	nop
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <main+0x5c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0fa      	beq.n	800104c <main+0x28>
    Data_Ready = 0; // Bayrağı sıfırla ki bir sonraki ölçüm için tekrar bekleyebilelim.
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <main+0x5c>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]

    // Ölçülen mesafeyi UART üzerinden gönder
    printf("Mesafe: %.2f cm\r\n", Distance);
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <main+0x60>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa91 	bl	8000588 <__aeabi_f2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4807      	ldr	r0, [pc, #28]	@ (8001088 <main+0x64>)
 800106c:	f004 fb3a 	bl	80056e4 <iprintf>

    HAL_Delay(500); // Yarım saniye bekleyin, böylece ölçümler arası bir boşluk olur
 8001070:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001074:	f000 fc4a 	bl	800190c <HAL_Delay>
    HCSR04_Trigger();
 8001078:	e7e5      	b.n	8001046 <main+0x22>
 800107a:	bf00      	nop
 800107c:	08006490 	.word	0x08006490
 8001080:	200001c4 	.word	0x200001c4
 8001084:	200001c0 	.word	0x200001c0
 8001088:	080064c0 	.word	0x080064c0

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	@ 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	2238      	movs	r2, #56	@ 0x38
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fc6a 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010b2:	f000 fef7 	bl	8001ea4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2340      	movs	r3, #64	@ 0x40
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2302      	movs	r3, #2
 80010ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  // Burada PLL çarpanları SystemCoreClock'u 72MHz olarak ayarlıyor.
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 80010d0:	2309      	movs	r3, #9
 80010d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 ff91 	bl	800200c <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80010f0:	f000 f962 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2303      	movs	r3, #3
 80010fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2102      	movs	r1, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fa8f 	bl	8002630 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001118:	f000 f94e 	bl	80013b8 <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3750      	adds	r7, #80	@ 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001142:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <MX_TIM1_Init+0xac>)
 8001144:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <MX_TIM1_Init+0xb0>)
 8001146:	601a      	str	r2, [r3, #0]
  // Prescaler: 72MHz SystemCoreClock için, (71+1) = 72. Bu, zamanlayıcıyı 1 MHz'e düşürür.
  // Yani, her zamanlayıcı sayımı 1 mikrosaniyeye eşittir.
  htim1.Init.Prescaler = 71;
 8001148:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <MX_TIM1_Init+0xac>)
 800114a:	2247      	movs	r2, #71	@ 0x47
 800114c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <MX_TIM1_Init+0xac>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535; // 16-bit zamanlayıcı için maksimum değer (0xFFFF)
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <MX_TIM1_Init+0xac>)
 8001156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <MX_TIM1_Init+0xac>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001162:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <MX_TIM1_Init+0xac>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <MX_TIM1_Init+0xac>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800116e:	4818      	ldr	r0, [pc, #96]	@ (80011d0 <MX_TIM1_Init+0xac>)
 8001170:	f001 ff1f 	bl	8002fb2 <HAL_TIM_IC_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800117a:	f000 f91d 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480f      	ldr	r0, [pc, #60]	@ (80011d0 <MX_TIM1_Init+0xac>)
 8001192:	f003 fa0d 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800119c:	f000 f90c 	bl	80013b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING; // İlk olarak yükselen kenarı yakala
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <MX_TIM1_Init+0xac>)
 80011b8:	f002 faaf 	bl	800371a <HAL_TIM_IC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80011c2:	f000 f8f9 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000084 	.word	0x20000084
 80011d4:	40012c00 	.word	0x40012c00

080011d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <MX_TIM2_Init+0xb0>)
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001202:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <MX_TIM2_Init+0xb0>)
 8001206:	2248      	movs	r2, #72	@ 0x48
 8001208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <MX_TIM2_Init+0xb0>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8001210:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <MX_TIM2_Init+0xb0>)
 8001212:	f240 128f 	movw	r2, #399	@ 0x18f
 8001216:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_TIM2_Init+0xb0>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_TIM2_Init+0xb0>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <MX_TIM2_Init+0xb0>)
 8001226:	f001 fe6d 	bl	8002f04 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001230:	f000 f8c2 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_TIM2_Init+0xb0>)
 8001244:	f003 f9b4 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800124e:	f000 f8b3 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM2_Init+0xb0>)
 800126a:	f002 faf3 	bl	8003854 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001274:	f000 f8a0 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM2_Init+0xb0>)
 800127a:	f000 f931 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	@ 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000d0 	.word	0x200000d0

0800128c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <MX_USART2_UART_Init+0x90>)
 8001292:	4a23      	ldr	r2, [pc, #140]	@ (8001320 <MX_USART2_UART_Init+0x94>)
 8001294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001296:	4b21      	ldr	r3, [pc, #132]	@ (800131c <MX_USART2_UART_Init+0x90>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d4:	4811      	ldr	r0, [pc, #68]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012d6:	f003 fa47 	bl	8004768 <HAL_UART_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012e0:	f000 f86a 	bl	80013b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e4:	2100      	movs	r1, #0
 80012e6:	480d      	ldr	r0, [pc, #52]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012e8:	f004 f870 	bl	80053cc <HAL_UARTEx_SetTxFifoThreshold>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012f2:	f000 f861 	bl	80013b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4808      	ldr	r0, [pc, #32]	@ (800131c <MX_USART2_UART_Init+0x90>)
 80012fa:	f004 f8a5 	bl	8005448 <HAL_UARTEx_SetRxFifoThreshold>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001304:	f000 f858 	bl	80013b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_USART2_UART_Init+0x90>)
 800130a:	f004 f826 	bl	800535a <HAL_UARTEx_DisableFifoMode>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001314:	f000 f850 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000011c 	.word	0x2000011c
 8001320:	40004400 	.word	0x40004400

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800133a:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a16      	ldr	r2, [pc, #88]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a10      	ldr	r2, [pc, #64]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_GPIO_Init+0x8c>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level for TRIG_PIN */
  // TRIG_PIN'in (PC0) başlangıçta düşük olmasını sağla
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2101      	movs	r1, #1
 8001386:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <MX_GPIO_Init+0x90>)
 8001388:	f000 fd74 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 (TRIG_PIN) */
  GPIO_InitStruct.Pin = TRIG_PIN;
 800138c:	2301      	movs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // Hızlı darbe geçişi için yüksek hız
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIG_PORT, &GPIO_InitStruct);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_GPIO_Init+0x90>)
 80013a4:	f000 fbe4 	bl	8001b70 <HAL_GPIO_Init>
  // Genellikle PA8 veya PA9 kullanılır, ancak projenizin CubeMX ayarlarından kontrol etmeniz önemlidir.

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000800 	.word	0x48000800

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <Error_Handler+0x8>

080013c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <HAL_MspInit+0x44>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <HAL_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <HAL_MspInit+0x44>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_MspInit+0x44>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <HAL_MspInit+0x44>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_MspInit+0x44>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013fa:	f000 fdf7 	bl	8001fec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <HAL_TIM_IC_MspInit+0x8c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12f      	bne.n	800148e <HAL_TIM_IC_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142e:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <HAL_TIM_IC_MspInit+0x90>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	4a1a      	ldr	r2, [pc, #104]	@ (800149c <HAL_TIM_IC_MspInit+0x90>)
 8001434:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001438:	6613      	str	r3, [r2, #96]	@ 0x60
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <HAL_TIM_IC_MspInit+0x90>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_TIM_IC_MspInit+0x90>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a14      	ldr	r2, [pc, #80]	@ (800149c <HAL_TIM_IC_MspInit+0x90>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_TIM_IC_MspInit+0x90>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800145e:	2301      	movs	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800146e:	2302      	movs	r3, #2
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <HAL_TIM_IC_MspInit+0x94>)
 800147a:	f000 fb79 	bl	8001b70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	201b      	movs	r0, #27
 8001484:	f000 fb3f 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001488:	201b      	movs	r0, #27
 800148a:	f000 fb56 	bl	8001b3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	@ 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40012c00 	.word	0x40012c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000800 	.word	0x48000800

080014a4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b4:	d10b      	bne.n	80014ce <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_TIM_PWM_MspInit+0x38>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ba:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <HAL_TIM_PWM_MspInit+0x38>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_TIM_PWM_MspInit+0x38>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001500:	d11c      	bne.n	800153c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <HAL_TIM_MspPostInit+0x64>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <HAL_TIM_MspPostInit+0x64>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <HAL_TIM_MspPostInit+0x64>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800151a:	2320      	movs	r3, #32
 800151c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800152a:	2301      	movs	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001538:	f000 fb1a 	bl	8001b70 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b09e      	sub	sp, #120	@ 0x78
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2254      	movs	r2, #84	@ 0x54
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fa03 	bl	8005974 <memset>
  if(huart->Instance==USART2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a1f      	ldr	r2, [pc, #124]	@ (80015f0 <HAL_UART_MspInit+0xa8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d136      	bne.n	80015e6 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001578:	2302      	movs	r3, #2
 800157a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fa6f 	bl	8002a68 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001590:	f7ff ff12 	bl	80013b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <HAL_UART_MspInit+0xac>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001598:	4a16      	ldr	r2, [pc, #88]	@ (80015f4 <HAL_UART_MspInit+0xac>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159e:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_UART_MspInit+0xac>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_UART_MspInit+0xac>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b0:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <HAL_UART_MspInit+0xac>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_UART_MspInit+0xac>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015c4:	230c      	movs	r3, #12
 80015c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d4:	2307      	movs	r3, #7
 80015d6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e2:	f000 fac5 	bl	8001b70 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80015e6:	bf00      	nop
 80015e8:	3778      	adds	r7, #120	@ 0x78
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40004400 	.word	0x40004400
 80015f4:	40021000 	.word	0x40021000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 f93f 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <TIM1_CC_IRQHandler+0x10>)
 800165e:	f001 ff0d 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000084 	.word	0x20000084

0800166c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800167e:	f3af 8000 	nop.w
 8001682:	4601      	mov	r1, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf0      	blt.n	800167e <_read+0x12>
  }

  return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e009      	b.n	80016cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc9d 	bl	8001000 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf1      	blt.n	80016b8 <_write+0x12>
  }
  return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_close>:

int _close(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001706:	605a      	str	r2, [r3, #4]
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_isatty>:

int _isatty(int file)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f004 f94a 	bl	8005a10 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20020000 	.word	0x20020000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	200001c8 	.word	0x200001c8
 80017b0:	20000320 	.word	0x20000320

080017b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017d8:	480d      	ldr	r0, [pc, #52]	@ (8001810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017dc:	f7ff ffea 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopForever+0x6>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopForever+0xe>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopForever+0x16>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f004 f909 	bl	8005a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180a:	f7ff fc0b 	bl	8001024 <main>

0800180e <LoopForever>:

LoopForever:
    b LoopForever
 800180e:	e7fe      	b.n	800180e <LoopForever>
  ldr   r0, =_estack
 8001810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800181c:	08006558 	.word	0x08006558
  ldr r2, =_sbss
 8001820:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001824:	2000031c 	.word	0x2000031c

08001828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_2_IRQHandler>

0800182a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f95b 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f80e 	bl	800185c <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e001      	b.n	8001850 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184c:	f7ff fdba 	bl	80013c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001850:	79fb      	ldrb	r3, [r7, #7]

}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <HAL_InitTick+0x68>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d022      	beq.n	80018b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_InitTick+0x6c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <HAL_InitTick+0x68>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800187c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f966 	bl	8001b56 <HAL_SYSTICK_Config>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10f      	bne.n	80018b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	d809      	bhi.n	80018aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001896:	2200      	movs	r2, #0
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	f04f 30ff 	mov.w	r0, #4294967295
 800189e:	f000 f932 	bl	8001b06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_InitTick+0x70>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e007      	b.n	80018ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e004      	b.n	80018ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e001      	b.n	80018ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_IncTick+0x1c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_IncTick+0x20>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	4a03      	ldr	r2, [pc, #12]	@ (80018ec <HAL_IncTick+0x1c>)
 80018e0:	6013      	str	r3, [r2, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	200001cc 	.word	0x200001cc
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	200001cc 	.word	0x200001cc

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d004      	beq.n	8001930 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_Delay+0x40>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001930:	bf00      	nop
 8001932:	f7ff ffdf 	bl	80018f4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	429a      	cmp	r2, r3
 8001940:	d8f7      	bhi.n	8001932 <HAL_Delay+0x26>
  {
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000008 	.word	0x20000008

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	@ (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	@ (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	@ (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	@ 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	@ 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff40 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff90 	bl	8001a44 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5f 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff33 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa4 	bl	8001aac <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b7e:	e15a      	b.n	8001e36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 814c 	beq.w	8001e30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d005      	beq.n	8001bb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d130      	bne.n	8001c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be6:	2201      	movs	r2, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 0201 	and.w	r2, r3, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d017      	beq.n	8001c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d123      	bne.n	8001ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	6939      	ldr	r1, [r7, #16]
 8001c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0203 	and.w	r2, r3, #3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80a6 	beq.w	8001e30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e54 <HAL_GPIO_Init+0x2e4>)
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8001e54 <HAL_GPIO_Init+0x2e4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cf0:	4b58      	ldr	r3, [pc, #352]	@ (8001e54 <HAL_GPIO_Init+0x2e4>)
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfc:	4a56      	ldr	r2, [pc, #344]	@ (8001e58 <HAL_GPIO_Init+0x2e8>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d26:	d01f      	beq.n	8001d68 <HAL_GPIO_Init+0x1f8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e5c <HAL_GPIO_Init+0x2ec>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d019      	beq.n	8001d64 <HAL_GPIO_Init+0x1f4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a4b      	ldr	r2, [pc, #300]	@ (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_GPIO_Init+0x1f0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e64 <HAL_GPIO_Init+0x2f4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00d      	beq.n	8001d5c <HAL_GPIO_Init+0x1ec>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a49      	ldr	r2, [pc, #292]	@ (8001e68 <HAL_GPIO_Init+0x2f8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <HAL_GPIO_Init+0x1e8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a48      	ldr	r2, [pc, #288]	@ (8001e6c <HAL_GPIO_Init+0x2fc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_GPIO_Init+0x1e4>
 8001d50:	2305      	movs	r3, #5
 8001d52:	e00a      	b.n	8001d6a <HAL_GPIO_Init+0x1fa>
 8001d54:	2306      	movs	r3, #6
 8001d56:	e008      	b.n	8001d6a <HAL_GPIO_Init+0x1fa>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e006      	b.n	8001d6a <HAL_GPIO_Init+0x1fa>
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_Init+0x1fa>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x1fa>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_Init+0x1fa>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d7a:	4937      	ldr	r1, [pc, #220]	@ (8001e58 <HAL_GPIO_Init+0x2e8>)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d88:	4b39      	ldr	r3, [pc, #228]	@ (8001e70 <HAL_GPIO_Init+0x300>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dac:	4a30      	ldr	r2, [pc, #192]	@ (8001e70 <HAL_GPIO_Init+0x300>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001db2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <HAL_GPIO_Init+0x300>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dd6:	4a26      	ldr	r2, [pc, #152]	@ (8001e70 <HAL_GPIO_Init+0x300>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_GPIO_Init+0x300>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e00:	4a1b      	ldr	r2, [pc, #108]	@ (8001e70 <HAL_GPIO_Init+0x300>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_GPIO_Init+0x300>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e2a:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_GPIO_Init+0x300>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f ae9d 	bne.w	8001b80 <HAL_GPIO_Init+0x10>
  }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	48000800 	.word	0x48000800
 8001e64:	48000c00 	.word	0x48000c00
 8001e68:	48001000 	.word	0x48001000
 8001e6c:	48001400 	.word	0x48001400
 8001e70:	40010400 	.word	0x40010400

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d141      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d131      	bne.n	8001f24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec0:	4b47      	ldr	r3, [pc, #284]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ec6:	4a46      	ldr	r2, [pc, #280]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ecc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed0:	4b43      	ldr	r3, [pc, #268]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ed8:	4a41      	ldr	r2, [pc, #260]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ede:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ee0:	4b40      	ldr	r3, [pc, #256]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2232      	movs	r2, #50	@ 0x32
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	0c9b      	lsrs	r3, r3, #18
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef6:	e002      	b.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001efe:	4b38      	ldr	r3, [pc, #224]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0a:	d102      	bne.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f2      	bne.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f12:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1e:	d158      	bne.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e057      	b.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f24:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f34:	e04d      	b.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f3c:	d141      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4a:	d131      	bne.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f52:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5c:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f64:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2232      	movs	r2, #50	@ 0x32
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	0c9b      	lsrs	r3, r3, #18
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f82:	e002      	b.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f96:	d102      	bne.n	8001f9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f2      	bne.n	8001f84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001faa:	d112      	bne.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e011      	b.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fc0:	e007      	b.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	431bde83 	.word	0x431bde83

08001fec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ff6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ffa:	6093      	str	r3, [r2, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40007000 	.word	0x40007000

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e2fe      	b.n	800261c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d075      	beq.n	8002116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202a:	4b97      	ldr	r3, [pc, #604]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002034:	4b94      	ldr	r3, [pc, #592]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d102      	bne.n	800204a <HAL_RCC_OscConfig+0x3e>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d002      	beq.n	8002050 <HAL_RCC_OscConfig+0x44>
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d10b      	bne.n	8002068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	4b8d      	ldr	r3, [pc, #564]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d05b      	beq.n	8002114 <HAL_RCC_OscConfig+0x108>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d157      	bne.n	8002114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e2d9      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002070:	d106      	bne.n	8002080 <HAL_RCC_OscConfig+0x74>
 8002072:	4b85      	ldr	r3, [pc, #532]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a84      	ldr	r2, [pc, #528]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e01d      	b.n	80020bc <HAL_RCC_OscConfig+0xb0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x98>
 800208a:	4b7f      	ldr	r3, [pc, #508]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7e      	ldr	r2, [pc, #504]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b7c      	ldr	r3, [pc, #496]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7b      	ldr	r2, [pc, #492]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0xb0>
 80020a4:	4b78      	ldr	r3, [pc, #480]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a77      	ldr	r2, [pc, #476]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b75      	ldr	r3, [pc, #468]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a74      	ldr	r2, [pc, #464]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80020b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff fc16 	bl	80018f4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fc12 	bl	80018f4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e29e      	b.n	800261c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020de:	4b6a      	ldr	r3, [pc, #424]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0xc0>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff fc02 	bl	80018f4 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff fbfe 	bl	80018f4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	@ 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e28a      	b.n	800261c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002106:	4b60      	ldr	r3, [pc, #384]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0xe8>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d075      	beq.n	800220e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	4b59      	ldr	r3, [pc, #356]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212c:	4b56      	ldr	r3, [pc, #344]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b0c      	cmp	r3, #12
 800213a:	d102      	bne.n	8002142 <HAL_RCC_OscConfig+0x136>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d002      	beq.n	8002148 <HAL_RCC_OscConfig+0x13c>
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d11f      	bne.n	8002188 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002148:	4b4f      	ldr	r3, [pc, #316]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_OscConfig+0x154>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e25d      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b49      	ldr	r3, [pc, #292]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	4946      	ldr	r1, [pc, #280]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002174:	4b45      	ldr	r3, [pc, #276]	@ (800228c <HAL_RCC_OscConfig+0x280>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fb6f 	bl	800185c <HAL_InitTick>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d043      	beq.n	800220c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e249      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d023      	beq.n	80021d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4b3d      	ldr	r3, [pc, #244]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3c      	ldr	r2, [pc, #240]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff fbaa 	bl	80018f4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a4:	f7ff fba6 	bl	80018f4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e232      	b.n	800261c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b6:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	061b      	lsls	r3, r3, #24
 80021d0:	492d      	ldr	r1, [pc, #180]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
 80021d6:	e01a      	b.n	800220e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 80021de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff fb86 	bl	80018f4 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7ff fb82 	bl	80018f4 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e20e      	b.n	800261c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021fe:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e0>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d041      	beq.n	800229e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01c      	beq.n	800225c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002228:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7ff fb5f 	bl	80018f4 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223a:	f7ff fb5b 	bl	80018f4 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1e7      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800224c:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0ef      	beq.n	800223a <HAL_RCC_OscConfig+0x22e>
 800225a:	e020      	b.n	800229e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225c:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002262:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7ff fb42 	bl	80018f4 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002272:	e00d      	b.n	8002290 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff fb3e 	bl	80018f4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d906      	bls.n	8002290 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1ca      	b.n	800261c <HAL_RCC_OscConfig+0x610>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002290:	4b8c      	ldr	r3, [pc, #560]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1ea      	bne.n	8002274 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80a6 	beq.w	80023f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022b0:	4b84      	ldr	r3, [pc, #528]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2b4>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x2b6>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b7f      	ldr	r3, [pc, #508]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	4a7e      	ldr	r2, [pc, #504]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d2:	4b7c      	ldr	r3, [pc, #496]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e2:	4b79      	ldr	r3, [pc, #484]	@ (80024c8 <HAL_RCC_OscConfig+0x4bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ee:	4b76      	ldr	r3, [pc, #472]	@ (80024c8 <HAL_RCC_OscConfig+0x4bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a75      	ldr	r2, [pc, #468]	@ (80024c8 <HAL_RCC_OscConfig+0x4bc>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fafb 	bl	80018f4 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7ff faf7 	bl	80018f4 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e183      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002314:	4b6c      	ldr	r3, [pc, #432]	@ (80024c8 <HAL_RCC_OscConfig+0x4bc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d108      	bne.n	800233a <HAL_RCC_OscConfig+0x32e>
 8002328:	4b66      	ldr	r3, [pc, #408]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232e:	4a65      	ldr	r2, [pc, #404]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002338:	e024      	b.n	8002384 <HAL_RCC_OscConfig+0x378>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d110      	bne.n	8002364 <HAL_RCC_OscConfig+0x358>
 8002342:	4b60      	ldr	r3, [pc, #384]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002348:	4a5e      	ldr	r2, [pc, #376]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002352:	4b5c      	ldr	r3, [pc, #368]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002358:	4a5a      	ldr	r2, [pc, #360]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002362:	e00f      	b.n	8002384 <HAL_RCC_OscConfig+0x378>
 8002364:	4b57      	ldr	r3, [pc, #348]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	4a56      	ldr	r2, [pc, #344]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002374:	4b53      	ldr	r3, [pc, #332]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237a:	4a52      	ldr	r2, [pc, #328]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d016      	beq.n	80023ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff fab2 	bl	80018f4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7ff faae 	bl	80018f4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e138      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023aa:	4b46      	ldr	r3, [pc, #280]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ed      	beq.n	8002394 <HAL_RCC_OscConfig+0x388>
 80023b8:	e015      	b.n	80023e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7ff fa9b 	bl	80018f4 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7ff fa97 	bl	80018f4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e121      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d8:	4b3a      	ldr	r3, [pc, #232]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ed      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023e6:	7ffb      	ldrb	r3, [r7, #31]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b35      	ldr	r3, [pc, #212]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	4a34      	ldr	r2, [pc, #208]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03c      	beq.n	800247e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01c      	beq.n	8002446 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800240c:	4b2d      	ldr	r3, [pc, #180]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 800240e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002412:	4a2c      	ldr	r2, [pc, #176]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7ff fa6a 	bl	80018f4 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002424:	f7ff fa66 	bl	80018f4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e0f2      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002436:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ef      	beq.n	8002424 <HAL_RCC_OscConfig+0x418>
 8002444:	e01b      	b.n	800247e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002446:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002448:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800244c:	4a1d      	ldr	r2, [pc, #116]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7ff fa4d 	bl	80018f4 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800245e:	f7ff fa49 	bl	80018f4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0d5      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002470:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 8002472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ef      	bne.n	800245e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80c9 	beq.w	800261a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002488:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b0c      	cmp	r3, #12
 8002492:	f000 8083 	beq.w	800259c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d15e      	bne.n	800255c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a08      	ldr	r2, [pc, #32]	@ (80024c4 <HAL_RCC_OscConfig+0x4b8>)
 80024a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7ff fa23 	bl	80018f4 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b0:	e00c      	b.n	80024cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7ff fa1f 	bl	80018f4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d905      	bls.n	80024cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0ab      	b.n	800261c <HAL_RCC_OscConfig+0x610>
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	4b55      	ldr	r3, [pc, #340]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ec      	bne.n	80024b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d8:	4b52      	ldr	r3, [pc, #328]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	4b52      	ldr	r3, [pc, #328]	@ (8002628 <HAL_RCC_OscConfig+0x61c>)
 80024de:	4013      	ands	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6a11      	ldr	r1, [r2, #32]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024e8:	3a01      	subs	r2, #1
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024f2:	0212      	lsls	r2, r2, #8
 80024f4:	4311      	orrs	r1, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024fa:	0852      	lsrs	r2, r2, #1
 80024fc:	3a01      	subs	r2, #1
 80024fe:	0552      	lsls	r2, r2, #21
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002506:	0852      	lsrs	r2, r2, #1
 8002508:	3a01      	subs	r2, #1
 800250a:	0652      	lsls	r2, r2, #25
 800250c:	4311      	orrs	r1, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002512:	06d2      	lsls	r2, r2, #27
 8002514:	430a      	orrs	r2, r1
 8002516:	4943      	ldr	r1, [pc, #268]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 8002518:	4313      	orrs	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a40      	ldr	r2, [pc, #256]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 8002522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002526:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002528:	4b3e      	ldr	r3, [pc, #248]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a3d      	ldr	r2, [pc, #244]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002532:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff f9de 	bl	80018f4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff f9da 	bl	80018f4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e066      	b.n	800261c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254e:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x530>
 800255a:	e05e      	b.n	800261a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255c:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a30      	ldr	r2, [pc, #192]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 8002562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7ff f9c4 	bl	80018f4 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002570:	f7ff f9c0 	bl	80018f4 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e04c      	b.n	800261c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002582:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800258e:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	4924      	ldr	r1, [pc, #144]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 8002594:	4b25      	ldr	r3, [pc, #148]	@ (800262c <HAL_RCC_OscConfig+0x620>)
 8002596:	4013      	ands	r3, r2
 8002598:	60cb      	str	r3, [r1, #12]
 800259a:	e03e      	b.n	800261a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e039      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <HAL_RCC_OscConfig+0x618>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0203 	and.w	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d12c      	bne.n	8002616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	3b01      	subs	r3, #1
 80025c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d123      	bne.n	8002616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d11b      	bne.n	8002616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d113      	bne.n	8002616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	3b01      	subs	r3, #1
 80025fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d109      	bne.n	8002616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	3b01      	subs	r3, #1
 8002610:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	019f800c 	.word	0x019f800c
 800262c:	feeefffc 	.word	0xfeeefffc

08002630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e11e      	b.n	8002886 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b91      	ldr	r3, [pc, #580]	@ (8002890 <HAL_RCC_ClockConfig+0x260>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b8e      	ldr	r3, [pc, #568]	@ (8002890 <HAL_RCC_ClockConfig+0x260>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 020f 	bic.w	r2, r3, #15
 800265e:	498c      	ldr	r1, [pc, #560]	@ (8002890 <HAL_RCC_ClockConfig+0x260>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b8a      	ldr	r3, [pc, #552]	@ (8002890 <HAL_RCC_ClockConfig+0x260>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e106      	b.n	8002886 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d073      	beq.n	800276c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d129      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268c:	4b81      	ldr	r3, [pc, #516]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0f4      	b.n	8002886 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800269c:	f000 f99e 	bl	80029dc <RCC_GetSysClockFreqFromPLLSource>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4a7c      	ldr	r2, [pc, #496]	@ (8002898 <HAL_RCC_ClockConfig+0x268>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d93f      	bls.n	800272a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d033      	beq.n	800272a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d12f      	bne.n	800272a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ca:	4b72      	ldr	r3, [pc, #456]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026d2:	4a70      	ldr	r2, [pc, #448]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80026d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026da:	2380      	movs	r3, #128	@ 0x80
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e024      	b.n	800272a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0c6      	b.n	8002886 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f8:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0be      	b.n	8002886 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002708:	f000 f8ce 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 800270c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4a61      	ldr	r2, [pc, #388]	@ (8002898 <HAL_RCC_ClockConfig+0x268>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d909      	bls.n	800272a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002716:	4b5f      	ldr	r3, [pc, #380]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800271e:	4a5d      	ldr	r2, [pc, #372]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 8002720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002724:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b5a      	ldr	r3, [pc, #360]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4957      	ldr	r1, [pc, #348]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273c:	f7ff f8da 	bl	80018f4 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7ff f8d6 	bl	80018f4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e095      	b.n	8002886 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b4e      	ldr	r3, [pc, #312]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002784:	4b43      	ldr	r3, [pc, #268]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a42      	ldr	r2, [pc, #264]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 800278a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800278e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800279c:	4b3d      	ldr	r3, [pc, #244]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80027a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b39      	ldr	r3, [pc, #228]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4936      	ldr	r1, [pc, #216]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
 80027be:	e008      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b80      	cmp	r3, #128	@ 0x80
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027c6:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4a32      	ldr	r2, [pc, #200]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 80027cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002890 <HAL_RCC_ClockConfig+0x260>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d21d      	bcs.n	800281c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 020f 	bic.w	r2, r3, #15
 80027e8:	4929      	ldr	r1, [pc, #164]	@ (8002890 <HAL_RCC_ClockConfig+0x260>)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027f0:	f7ff f880 	bl	80018f4 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7ff f87c 	bl	80018f4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e03b      	b.n	8002886 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <HAL_RCC_ClockConfig+0x260>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d1ed      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002828:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4917      	ldr	r1, [pc, #92]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002846:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	490f      	ldr	r1, [pc, #60]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800285a:	f000 f825 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 800285e:	4602      	mov	r2, r0
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <HAL_RCC_ClockConfig+0x264>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	490c      	ldr	r1, [pc, #48]	@ (800289c <HAL_RCC_ClockConfig+0x26c>)
 800286c:	5ccb      	ldrb	r3, [r1, r3]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_RCC_ClockConfig+0x270>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800287a:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <HAL_RCC_ClockConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe ffec 	bl	800185c <HAL_InitTick>
 8002884:	4603      	mov	r3, r0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40022000 	.word	0x40022000
 8002894:	40021000 	.word	0x40021000
 8002898:	04c4b400 	.word	0x04c4b400
 800289c:	080064d4 	.word	0x080064d4
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d102      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	e047      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028c0:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d102      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028cc:	4b26      	ldr	r3, [pc, #152]	@ (8002968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	e03e      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028d2:	4b23      	ldr	r3, [pc, #140]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d136      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028de:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	4a16      	ldr	r2, [pc, #88]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002906:	68d2      	ldr	r2, [r2, #12]
 8002908:	0a12      	lsrs	r2, r2, #8
 800290a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
      break;
 8002914:	e00c      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002916:	4a13      	ldr	r2, [pc, #76]	@ (8002964 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4a10      	ldr	r2, [pc, #64]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	0a12      	lsrs	r2, r2, #8
 8002924:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
      break;
 800292e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0e5b      	lsrs	r3, r3, #25
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e001      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002950:	693b      	ldr	r3, [r7, #16]
}
 8002952:	4618      	mov	r0, r3
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	00f42400 	.word	0x00f42400
 8002968:	007a1200 	.word	0x007a1200

0800296c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_RCC_GetHCLKFreq+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000000 	.word	0x20000000

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002988:	f7ff fff0 	bl	800296c <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4904      	ldr	r1, [pc, #16]	@ (80029ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	080064e4 	.word	0x080064e4

080029b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029b4:	f7ff ffda 	bl	800296c <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0adb      	lsrs	r3, r3, #11
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4904      	ldr	r1, [pc, #16]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	080064e4 	.word	0x080064e4

080029dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029e2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3301      	adds	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d10c      	bne.n	8002a1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a00:	4a17      	ldr	r2, [pc, #92]	@ (8002a60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	4a14      	ldr	r2, [pc, #80]	@ (8002a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a0a:	68d2      	ldr	r2, [r2, #12]
 8002a0c:	0a12      	lsrs	r2, r2, #8
 8002a0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
    break;
 8002a18:	e00c      	b.n	8002a34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a1a:	4a12      	ldr	r2, [pc, #72]	@ (8002a64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4a0e      	ldr	r2, [pc, #56]	@ (8002a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	0a12      	lsrs	r2, r2, #8
 8002a28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
    break;
 8002a32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0e5b      	lsrs	r3, r3, #25
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a4e:	687b      	ldr	r3, [r7, #4]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	007a1200 	.word	0x007a1200
 8002a64:	00f42400 	.word	0x00f42400

08002a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a70:	2300      	movs	r3, #0
 8002a72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a74:	2300      	movs	r3, #0
 8002a76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8098 	beq.w	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8a:	4b43      	ldr	r3, [pc, #268]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10d      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a39      	ldr	r2, [pc, #228]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002abe:	f7fe ff19 	bl	80018f4 <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac4:	e009      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fe ff15 	bl	80018f4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d902      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ad8:	e005      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ada:	4b30      	ldr	r3, [pc, #192]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ef      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d159      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aec:	4b2a      	ldr	r3, [pc, #168]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01e      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d019      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b08:	4b23      	ldr	r3, [pc, #140]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b14:	4b20      	ldr	r3, [pc, #128]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b24:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b34:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fed5 	bl	80018f4 <HAL_GetTick>
 8002b4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fe fed1 	bl	80018f4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d902      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	74fb      	strb	r3, [r7, #19]
            break;
 8002b64:	e006      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ec      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b88:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b90:	e008      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	74bb      	strb	r3, [r7, #18]
 8002b96:	e005      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba4:	7c7b      	ldrb	r3, [r7, #17]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4ba7      	ldr	r3, [pc, #668]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bae:	4aa6      	ldr	r2, [pc, #664]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc2:	4ba1      	ldr	r3, [pc, #644]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc8:	f023 0203 	bic.w	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	499d      	ldr	r1, [pc, #628]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be4:	4b98      	ldr	r3, [pc, #608]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	f023 020c 	bic.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4995      	ldr	r1, [pc, #596]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c06:	4b90      	ldr	r3, [pc, #576]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	498c      	ldr	r1, [pc, #560]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c28:	4b87      	ldr	r3, [pc, #540]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4984      	ldr	r1, [pc, #528]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	497b      	ldr	r1, [pc, #492]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c6c:	4b76      	ldr	r3, [pc, #472]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	4973      	ldr	r1, [pc, #460]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	496a      	ldr	r1, [pc, #424]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb0:	4b65      	ldr	r3, [pc, #404]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4962      	ldr	r1, [pc, #392]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	4959      	ldr	r1, [pc, #356]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cf4:	4b54      	ldr	r3, [pc, #336]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	4951      	ldr	r1, [pc, #324]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d16:	4b4c      	ldr	r3, [pc, #304]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	4948      	ldr	r1, [pc, #288]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d38:	4b43      	ldr	r3, [pc, #268]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	4940      	ldr	r1, [pc, #256]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d56:	d105      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d58:	4b3b      	ldr	r3, [pc, #236]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d62:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d015      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d70:	4b35      	ldr	r3, [pc, #212]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7e:	4932      	ldr	r1, [pc, #200]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d90:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a2c      	ldr	r2, [pc, #176]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d9a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002da8:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	4924      	ldr	r1, [pc, #144]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d015      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002de0:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dee:	4916      	ldr	r1, [pc, #88]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a10      	ldr	r2, [pc, #64]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d019      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	4908      	ldr	r1, [pc, #32]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e36:	d109      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e38:	4b03      	ldr	r3, [pc, #12]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a02      	ldr	r2, [pc, #8]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e42:	60d3      	str	r3, [r2, #12]
 8002e44:	e002      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d015      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e58:	4b29      	ldr	r3, [pc, #164]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	4926      	ldr	r1, [pc, #152]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e76:	d105      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e78:	4b21      	ldr	r3, [pc, #132]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a20      	ldr	r2, [pc, #128]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9e:	4918      	ldr	r1, [pc, #96]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eae:	d105      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d015      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed6:	490a      	ldr	r1, [pc, #40]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a04      	ldr	r2, [pc, #16]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ef2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ef4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000

08002f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e049      	b.n	8002faa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe faba 	bl	80014a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 fe06 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e049      	b.n	8003058 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fe fa17 	bl	800140c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f000 fdaf 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d104      	bne.n	800307e <HAL_TIM_IC_Start_IT+0x1e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e023      	b.n	80030c6 <HAL_TIM_IC_Start_IT+0x66>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d104      	bne.n	800308e <HAL_TIM_IC_Start_IT+0x2e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e01b      	b.n	80030c6 <HAL_TIM_IC_Start_IT+0x66>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d104      	bne.n	800309e <HAL_TIM_IC_Start_IT+0x3e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309a:	b2db      	uxtb	r3, r3
 800309c:	e013      	b.n	80030c6 <HAL_TIM_IC_Start_IT+0x66>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_IC_Start_IT+0x4e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e00b      	b.n	80030c6 <HAL_TIM_IC_Start_IT+0x66>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d104      	bne.n	80030be <HAL_TIM_IC_Start_IT+0x5e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e003      	b.n	80030c6 <HAL_TIM_IC_Start_IT+0x66>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <HAL_TIM_IC_Start_IT+0x78>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	e013      	b.n	8003100 <HAL_TIM_IC_Start_IT+0xa0>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d104      	bne.n	80030e8 <HAL_TIM_IC_Start_IT+0x88>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e00b      	b.n	8003100 <HAL_TIM_IC_Start_IT+0xa0>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d104      	bne.n	80030f8 <HAL_TIM_IC_Start_IT+0x98>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e003      	b.n	8003100 <HAL_TIM_IC_Start_IT+0xa0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003102:	7bbb      	ldrb	r3, [r7, #14]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d102      	bne.n	800310e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003108:	7b7b      	ldrb	r3, [r7, #13]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0e2      	b.n	80032d8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <HAL_TIM_IC_Start_IT+0xc2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003120:	e023      	b.n	800316a <HAL_TIM_IC_Start_IT+0x10a>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d104      	bne.n	8003132 <HAL_TIM_IC_Start_IT+0xd2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003130:	e01b      	b.n	800316a <HAL_TIM_IC_Start_IT+0x10a>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d104      	bne.n	8003142 <HAL_TIM_IC_Start_IT+0xe2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003140:	e013      	b.n	800316a <HAL_TIM_IC_Start_IT+0x10a>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d104      	bne.n	8003152 <HAL_TIM_IC_Start_IT+0xf2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003150:	e00b      	b.n	800316a <HAL_TIM_IC_Start_IT+0x10a>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b10      	cmp	r3, #16
 8003156:	d104      	bne.n	8003162 <HAL_TIM_IC_Start_IT+0x102>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003160:	e003      	b.n	800316a <HAL_TIM_IC_Start_IT+0x10a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <HAL_TIM_IC_Start_IT+0x11a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003178:	e013      	b.n	80031a2 <HAL_TIM_IC_Start_IT+0x142>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d104      	bne.n	800318a <HAL_TIM_IC_Start_IT+0x12a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003188:	e00b      	b.n	80031a2 <HAL_TIM_IC_Start_IT+0x142>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d104      	bne.n	800319a <HAL_TIM_IC_Start_IT+0x13a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003198:	e003      	b.n	80031a2 <HAL_TIM_IC_Start_IT+0x142>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d841      	bhi.n	800322c <HAL_TIM_IC_Start_IT+0x1cc>
 80031a8:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <HAL_TIM_IC_Start_IT+0x150>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031e5 	.word	0x080031e5
 80031b4:	0800322d 	.word	0x0800322d
 80031b8:	0800322d 	.word	0x0800322d
 80031bc:	0800322d 	.word	0x0800322d
 80031c0:	080031f7 	.word	0x080031f7
 80031c4:	0800322d 	.word	0x0800322d
 80031c8:	0800322d 	.word	0x0800322d
 80031cc:	0800322d 	.word	0x0800322d
 80031d0:	08003209 	.word	0x08003209
 80031d4:	0800322d 	.word	0x0800322d
 80031d8:	0800322d 	.word	0x0800322d
 80031dc:	0800322d 	.word	0x0800322d
 80031e0:	0800321b 	.word	0x0800321b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0202 	orr.w	r2, r2, #2
 80031f2:	60da      	str	r2, [r3, #12]
      break;
 80031f4:	e01d      	b.n	8003232 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0204 	orr.w	r2, r2, #4
 8003204:	60da      	str	r2, [r3, #12]
      break;
 8003206:	e014      	b.n	8003232 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0208 	orr.w	r2, r2, #8
 8003216:	60da      	str	r2, [r3, #12]
      break;
 8003218:	e00b      	b.n	8003232 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0210 	orr.w	r2, r2, #16
 8003228:	60da      	str	r2, [r3, #12]
      break;
 800322a:	e002      	b.n	8003232 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	bf00      	nop
  }

  if (status == HAL_OK)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d14e      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	6839      	ldr	r1, [r7, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f001 f98f 	bl	8004564 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a25      	ldr	r2, [pc, #148]	@ (80032e0 <HAL_TIM_IC_Start_IT+0x280>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0x236>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003258:	d01d      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0x236>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a21      	ldr	r2, [pc, #132]	@ (80032e4 <HAL_TIM_IC_Start_IT+0x284>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0x236>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	@ (80032e8 <HAL_TIM_IC_Start_IT+0x288>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0x236>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1e      	ldr	r2, [pc, #120]	@ (80032ec <HAL_TIM_IC_Start_IT+0x28c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0x236>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	@ (80032f0 <HAL_TIM_IC_Start_IT+0x290>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0x236>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_TIM_IC_Start_IT+0x294>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0x236>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <HAL_TIM_IC_Start_IT+0x298>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d115      	bne.n	80032c2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <HAL_TIM_IC_Start_IT+0x29c>)
 800329e:	4013      	ands	r3, r2
 80032a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d015      	beq.n	80032d4 <HAL_TIM_IC_Start_IT+0x274>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ae:	d011      	beq.n	80032d4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c0:	e008      	b.n	80032d4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e000      	b.n	80032d6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	40000c00 	.word	0x40000c00
 80032f0:	40013400 	.word	0x40013400
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40015000 	.word	0x40015000
 80032fc:	00010007 	.word	0x00010007

08003300 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d841      	bhi.n	8003398 <HAL_TIM_IC_Stop_IT+0x98>
 8003314:	a201      	add	r2, pc, #4	@ (adr r2, 800331c <HAL_TIM_IC_Stop_IT+0x1c>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003351 	.word	0x08003351
 8003320:	08003399 	.word	0x08003399
 8003324:	08003399 	.word	0x08003399
 8003328:	08003399 	.word	0x08003399
 800332c:	08003363 	.word	0x08003363
 8003330:	08003399 	.word	0x08003399
 8003334:	08003399 	.word	0x08003399
 8003338:	08003399 	.word	0x08003399
 800333c:	08003375 	.word	0x08003375
 8003340:	08003399 	.word	0x08003399
 8003344:	08003399 	.word	0x08003399
 8003348:	08003399 	.word	0x08003399
 800334c:	08003387 	.word	0x08003387
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0202 	bic.w	r2, r2, #2
 800335e:	60da      	str	r2, [r3, #12]
      break;
 8003360:	e01d      	b.n	800339e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0204 	bic.w	r2, r2, #4
 8003370:	60da      	str	r2, [r3, #12]
      break;
 8003372:	e014      	b.n	800339e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0208 	bic.w	r2, r2, #8
 8003382:	60da      	str	r2, [r3, #12]
      break;
 8003384:	e00b      	b.n	800339e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0210 	bic.w	r2, r2, #16
 8003394:	60da      	str	r2, [r3, #12]
      break;
 8003396:	e002      	b.n	800339e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	bf00      	nop
  }

  if (status == HAL_OK)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d166      	bne.n	8003472 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	6839      	ldr	r1, [r7, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 f8d9 	bl	8004564 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_TIM_IC_Stop_IT+0xe2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <HAL_TIM_IC_Stop_IT+0xe2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_IC_Stop_IT+0xf2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033f0:	e023      	b.n	800343a <HAL_TIM_IC_Stop_IT+0x13a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_IC_Stop_IT+0x102>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003400:	e01b      	b.n	800343a <HAL_TIM_IC_Stop_IT+0x13a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d104      	bne.n	8003412 <HAL_TIM_IC_Stop_IT+0x112>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003410:	e013      	b.n	800343a <HAL_TIM_IC_Stop_IT+0x13a>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d104      	bne.n	8003422 <HAL_TIM_IC_Stop_IT+0x122>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003420:	e00b      	b.n	800343a <HAL_TIM_IC_Stop_IT+0x13a>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b10      	cmp	r3, #16
 8003426:	d104      	bne.n	8003432 <HAL_TIM_IC_Stop_IT+0x132>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003430:	e003      	b.n	800343a <HAL_TIM_IC_Stop_IT+0x13a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d104      	bne.n	800344a <HAL_TIM_IC_Stop_IT+0x14a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003448:	e013      	b.n	8003472 <HAL_TIM_IC_Stop_IT+0x172>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d104      	bne.n	800345a <HAL_TIM_IC_Stop_IT+0x15a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003458:	e00b      	b.n	8003472 <HAL_TIM_IC_Stop_IT+0x172>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d104      	bne.n	800346a <HAL_TIM_IC_Stop_IT+0x16a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003468:	e003      	b.n	8003472 <HAL_TIM_IC_Stop_IT+0x172>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0202 	mvn.w	r2, #2
 80034b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fcce 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fb22 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fb29 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01b      	beq.n	800352c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0204 	mvn.w	r2, #4
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fca8 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fafc 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fb03 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d020      	beq.n	8003578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0208 	mvn.w	r2, #8
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd fc82 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fad6 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fadd 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d020      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01b      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2208      	movs	r2, #8
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fc5c 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fab0 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fab7 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0201 	mvn.w	r2, #1
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa8e 	bl	8003b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00c      	beq.n	8003616 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800360e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 f86d 	bl	80046f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f001 f865 	bl	8004704 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00c      	beq.n	800365e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa71 	bl	8003b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00c      	beq.n	8003682 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0220 	mvn.w	r2, #32
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f001 f82d 	bl	80046dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f001 f839 	bl	8004718 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f001 f831 	bl	800472c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f001 f829 	bl	8004740 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00c      	beq.n	8003712 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f001 f821 	bl	8004754 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003734:	2302      	movs	r3, #2
 8003736:	e088      	b.n	800384a <HAL_TIM_IC_ConfigChannel+0x130>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11b      	bne.n	800377e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003756:	f000 fddb 	bl	8004310 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 020c 	bic.w	r2, r2, #12
 8003768:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6999      	ldr	r1, [r3, #24]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	619a      	str	r2, [r3, #24]
 800377c:	e060      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11c      	bne.n	80037be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003794:	f000 fe30 	bl	80043f8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6999      	ldr	r1, [r3, #24]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	619a      	str	r2, [r3, #24]
 80037bc:	e040      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d11b      	bne.n	80037fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037d4:	f000 fe4d 	bl	8004472 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 020c 	bic.w	r2, r2, #12
 80037e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69d9      	ldr	r1, [r3, #28]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	61da      	str	r2, [r3, #28]
 80037fa:	e021      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d11c      	bne.n	800383c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003812:	f000 fe6a 	bl	80044ea <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003824:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	021a      	lsls	r2, r3, #8
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	61da      	str	r2, [r3, #28]
 800383a:	e001      	b.n	8003840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800386e:	2302      	movs	r3, #2
 8003870:	e0ff      	b.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b14      	cmp	r3, #20
 800387e:	f200 80f0 	bhi.w	8003a62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003882:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038dd 	.word	0x080038dd
 800388c:	08003a63 	.word	0x08003a63
 8003890:	08003a63 	.word	0x08003a63
 8003894:	08003a63 	.word	0x08003a63
 8003898:	0800391d 	.word	0x0800391d
 800389c:	08003a63 	.word	0x08003a63
 80038a0:	08003a63 	.word	0x08003a63
 80038a4:	08003a63 	.word	0x08003a63
 80038a8:	0800395f 	.word	0x0800395f
 80038ac:	08003a63 	.word	0x08003a63
 80038b0:	08003a63 	.word	0x08003a63
 80038b4:	08003a63 	.word	0x08003a63
 80038b8:	0800399f 	.word	0x0800399f
 80038bc:	08003a63 	.word	0x08003a63
 80038c0:	08003a63 	.word	0x08003a63
 80038c4:	08003a63 	.word	0x08003a63
 80038c8:	080039e1 	.word	0x080039e1
 80038cc:	08003a63 	.word	0x08003a63
 80038d0:	08003a63 	.word	0x08003a63
 80038d4:	08003a63 	.word	0x08003a63
 80038d8:	08003a21 	.word	0x08003a21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f9ea 	bl	8003cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0208 	orr.w	r2, r2, #8
 80038f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0204 	bic.w	r2, r2, #4
 8003906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6999      	ldr	r1, [r3, #24]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	619a      	str	r2, [r3, #24]
      break;
 800391a:	e0a5      	b.n	8003a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa64 	bl	8003df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6999      	ldr	r1, [r3, #24]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	021a      	lsls	r2, r3, #8
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	619a      	str	r2, [r3, #24]
      break;
 800395c:	e084      	b.n	8003a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fad7 	bl	8003f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0208 	orr.w	r2, r2, #8
 8003978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0204 	bic.w	r2, r2, #4
 8003988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69d9      	ldr	r1, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	61da      	str	r2, [r3, #28]
      break;
 800399c:	e064      	b.n	8003a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fb49 	bl	800403c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	61da      	str	r2, [r3, #28]
      break;
 80039de:	e043      	b.n	8003a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fbbc 	bl	8004164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0208 	orr.w	r2, r2, #8
 80039fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003a1e:	e023      	b.n	8003a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fc06 	bl	8004238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003a60:	e002      	b.n	8003a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
      break;
 8003a66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop

08003a7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d831      	bhi.n	8003af4 <HAL_TIM_ReadCapturedValue+0x78>
 8003a90:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003af5 	.word	0x08003af5
 8003aa0:	08003af5 	.word	0x08003af5
 8003aa4:	08003af5 	.word	0x08003af5
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003af5 	.word	0x08003af5
 8003ab0:	08003af5 	.word	0x08003af5
 8003ab4:	08003af5 	.word	0x08003af5
 8003ab8:	08003ae1 	.word	0x08003ae1
 8003abc:	08003af5 	.word	0x08003af5
 8003ac0:	08003af5 	.word	0x08003af5
 8003ac4:	08003af5 	.word	0x08003af5
 8003ac8:	08003aeb 	.word	0x08003aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad2:	60fb      	str	r3, [r7, #12]

      break;
 8003ad4:	e00f      	b.n	8003af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003adc:	60fb      	str	r3, [r7, #12]

      break;
 8003ade:	e00a      	b.n	8003af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae6:	60fb      	str	r3, [r7, #12]

      break;
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	60fb      	str	r3, [r7, #12]

      break;
 8003af2:	e000      	b.n	8003af6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003af4:	bf00      	nop
  }

  return tmpreg;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a4c      	ldr	r2, [pc, #304]	@ (8003c98 <TIM_Base_SetConfig+0x144>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d017      	beq.n	8003b9c <TIM_Base_SetConfig+0x48>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b72:	d013      	beq.n	8003b9c <TIM_Base_SetConfig+0x48>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a49      	ldr	r2, [pc, #292]	@ (8003c9c <TIM_Base_SetConfig+0x148>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00f      	beq.n	8003b9c <TIM_Base_SetConfig+0x48>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a48      	ldr	r2, [pc, #288]	@ (8003ca0 <TIM_Base_SetConfig+0x14c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_Base_SetConfig+0x48>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a47      	ldr	r2, [pc, #284]	@ (8003ca4 <TIM_Base_SetConfig+0x150>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_Base_SetConfig+0x48>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a46      	ldr	r2, [pc, #280]	@ (8003ca8 <TIM_Base_SetConfig+0x154>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_Base_SetConfig+0x48>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a45      	ldr	r2, [pc, #276]	@ (8003cac <TIM_Base_SetConfig+0x158>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d108      	bne.n	8003bae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a39      	ldr	r2, [pc, #228]	@ (8003c98 <TIM_Base_SetConfig+0x144>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d023      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bbc:	d01f      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a36      	ldr	r2, [pc, #216]	@ (8003c9c <TIM_Base_SetConfig+0x148>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01b      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a35      	ldr	r2, [pc, #212]	@ (8003ca0 <TIM_Base_SetConfig+0x14c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d017      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a34      	ldr	r2, [pc, #208]	@ (8003ca4 <TIM_Base_SetConfig+0x150>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ca8 <TIM_Base_SetConfig+0x154>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00f      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a33      	ldr	r2, [pc, #204]	@ (8003cb0 <TIM_Base_SetConfig+0x15c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a32      	ldr	r2, [pc, #200]	@ (8003cb4 <TIM_Base_SetConfig+0x160>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a31      	ldr	r2, [pc, #196]	@ (8003cb8 <TIM_Base_SetConfig+0x164>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8003cac <TIM_Base_SetConfig+0x158>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <TIM_Base_SetConfig+0x144>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <TIM_Base_SetConfig+0x110>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca8 <TIM_Base_SetConfig+0x154>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00f      	beq.n	8003c64 <TIM_Base_SetConfig+0x110>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <TIM_Base_SetConfig+0x15c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x110>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a19      	ldr	r2, [pc, #100]	@ (8003cb4 <TIM_Base_SetConfig+0x160>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x110>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a18      	ldr	r2, [pc, #96]	@ (8003cb8 <TIM_Base_SetConfig+0x164>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x110>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a13      	ldr	r2, [pc, #76]	@ (8003cac <TIM_Base_SetConfig+0x158>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d103      	bne.n	8003c6c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d105      	bne.n	8003c8a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40000c00 	.word	0x40000c00
 8003ca8:	40013400 	.word	0x40013400
 8003cac:	40015000 	.word	0x40015000
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800

08003cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f023 0201 	bic.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0303 	bic.w	r3, r3, #3
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f023 0302 	bic.w	r3, r3, #2
 8003d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a30      	ldr	r2, [pc, #192]	@ (8003dd8 <TIM_OC1_SetConfig+0x11c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <TIM_OC1_SetConfig+0x88>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003ddc <TIM_OC1_SetConfig+0x120>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00f      	beq.n	8003d44 <TIM_OC1_SetConfig+0x88>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <TIM_OC1_SetConfig+0x124>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_OC1_SetConfig+0x88>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003de4 <TIM_OC1_SetConfig+0x128>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_OC1_SetConfig+0x88>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a2c      	ldr	r2, [pc, #176]	@ (8003de8 <TIM_OC1_SetConfig+0x12c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC1_SetConfig+0x88>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dec <TIM_OC1_SetConfig+0x130>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10c      	bne.n	8003d5e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0308 	bic.w	r3, r3, #8
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd8 <TIM_OC1_SetConfig+0x11c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <TIM_OC1_SetConfig+0xd2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a1c      	ldr	r2, [pc, #112]	@ (8003ddc <TIM_OC1_SetConfig+0x120>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00f      	beq.n	8003d8e <TIM_OC1_SetConfig+0xd2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1b      	ldr	r2, [pc, #108]	@ (8003de0 <TIM_OC1_SetConfig+0x124>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_OC1_SetConfig+0xd2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <TIM_OC1_SetConfig+0x128>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_OC1_SetConfig+0xd2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a19      	ldr	r2, [pc, #100]	@ (8003de8 <TIM_OC1_SetConfig+0x12c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_OC1_SetConfig+0xd2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a18      	ldr	r2, [pc, #96]	@ (8003dec <TIM_OC1_SetConfig+0x130>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	621a      	str	r2, [r3, #32]
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40013400 	.word	0x40013400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800
 8003dec:	40015000 	.word	0x40015000

08003df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f023 0210 	bic.w	r2, r3, #16
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0320 	bic.w	r3, r3, #32
 8003e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <TIM_OC2_SetConfig+0x110>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <TIM_OC2_SetConfig+0x74>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a2b      	ldr	r2, [pc, #172]	@ (8003f04 <TIM_OC2_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_OC2_SetConfig+0x74>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f08 <TIM_OC2_SetConfig+0x118>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10d      	bne.n	8003e80 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <TIM_OC2_SetConfig+0x110>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <TIM_OC2_SetConfig+0xc0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f04 <TIM_OC2_SetConfig+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_OC2_SetConfig+0xc0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1e      	ldr	r2, [pc, #120]	@ (8003f0c <TIM_OC2_SetConfig+0x11c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_OC2_SetConfig+0xc0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <TIM_OC2_SetConfig+0x120>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_OC2_SetConfig+0xc0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <TIM_OC2_SetConfig+0x124>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_OC2_SetConfig+0xc0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <TIM_OC2_SetConfig+0x118>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d113      	bne.n	8003ed8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	621a      	str	r2, [r3, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40013400 	.word	0x40013400
 8003f08:	40015000 	.word	0x40015000
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40014800 	.word	0x40014800

08003f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2b      	ldr	r2, [pc, #172]	@ (8004024 <TIM_OC3_SetConfig+0x10c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <TIM_OC3_SetConfig+0x72>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004028 <TIM_OC3_SetConfig+0x110>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_OC3_SetConfig+0x72>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a29      	ldr	r2, [pc, #164]	@ (800402c <TIM_OC3_SetConfig+0x114>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10d      	bne.n	8003fa6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8004024 <TIM_OC3_SetConfig+0x10c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_OC3_SetConfig+0xbe>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004028 <TIM_OC3_SetConfig+0x110>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_OC3_SetConfig+0xbe>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <TIM_OC3_SetConfig+0x118>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_OC3_SetConfig+0xbe>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004034 <TIM_OC3_SetConfig+0x11c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_OC3_SetConfig+0xbe>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004038 <TIM_OC3_SetConfig+0x120>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_OC3_SetConfig+0xbe>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a16      	ldr	r2, [pc, #88]	@ (800402c <TIM_OC3_SetConfig+0x114>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d113      	bne.n	8003ffe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40013400 	.word	0x40013400
 800402c:	40015000 	.word	0x40015000
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800

0800403c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800406e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800408a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	031b      	lsls	r3, r3, #12
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a2c      	ldr	r2, [pc, #176]	@ (800414c <TIM_OC4_SetConfig+0x110>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_OC4_SetConfig+0x74>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004150 <TIM_OC4_SetConfig+0x114>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_OC4_SetConfig+0x74>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004154 <TIM_OC4_SetConfig+0x118>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10d      	bne.n	80040cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a1f      	ldr	r2, [pc, #124]	@ (800414c <TIM_OC4_SetConfig+0x110>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <TIM_OC4_SetConfig+0xc0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <TIM_OC4_SetConfig+0x114>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00f      	beq.n	80040fc <TIM_OC4_SetConfig+0xc0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1e      	ldr	r2, [pc, #120]	@ (8004158 <TIM_OC4_SetConfig+0x11c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_OC4_SetConfig+0xc0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1d      	ldr	r2, [pc, #116]	@ (800415c <TIM_OC4_SetConfig+0x120>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_OC4_SetConfig+0xc0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004160 <TIM_OC4_SetConfig+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_OC4_SetConfig+0xc0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a17      	ldr	r2, [pc, #92]	@ (8004154 <TIM_OC4_SetConfig+0x118>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d113      	bne.n	8004124 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004102:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800410a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	019b      	lsls	r3, r3, #6
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40013400 	.word	0x40013400
 8004154:	40015000 	.word	0x40015000
 8004158:	40014000 	.word	0x40014000
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800

08004164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80041a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a19      	ldr	r2, [pc, #100]	@ (8004220 <TIM_OC5_SetConfig+0xbc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <TIM_OC5_SetConfig+0x82>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a18      	ldr	r2, [pc, #96]	@ (8004224 <TIM_OC5_SetConfig+0xc0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_OC5_SetConfig+0x82>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a17      	ldr	r2, [pc, #92]	@ (8004228 <TIM_OC5_SetConfig+0xc4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_OC5_SetConfig+0x82>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a16      	ldr	r2, [pc, #88]	@ (800422c <TIM_OC5_SetConfig+0xc8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_OC5_SetConfig+0x82>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a15      	ldr	r2, [pc, #84]	@ (8004230 <TIM_OC5_SetConfig+0xcc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC5_SetConfig+0x82>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a14      	ldr	r2, [pc, #80]	@ (8004234 <TIM_OC5_SetConfig+0xd0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d109      	bne.n	80041fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800
 8004234:	40015000 	.word	0x40015000

08004238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800427e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	051b      	lsls	r3, r3, #20
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1a      	ldr	r2, [pc, #104]	@ (80042f8 <TIM_OC6_SetConfig+0xc0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <TIM_OC6_SetConfig+0x84>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a19      	ldr	r2, [pc, #100]	@ (80042fc <TIM_OC6_SetConfig+0xc4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00f      	beq.n	80042bc <TIM_OC6_SetConfig+0x84>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a18      	ldr	r2, [pc, #96]	@ (8004300 <TIM_OC6_SetConfig+0xc8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00b      	beq.n	80042bc <TIM_OC6_SetConfig+0x84>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a17      	ldr	r2, [pc, #92]	@ (8004304 <TIM_OC6_SetConfig+0xcc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <TIM_OC6_SetConfig+0x84>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a16      	ldr	r2, [pc, #88]	@ (8004308 <TIM_OC6_SetConfig+0xd0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC6_SetConfig+0x84>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a15      	ldr	r2, [pc, #84]	@ (800430c <TIM_OC6_SetConfig+0xd4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d109      	bne.n	80042d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	029b      	lsls	r3, r3, #10
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800
 800430c:	40015000 	.word	0x40015000

08004310 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f023 0201 	bic.w	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a28      	ldr	r2, [pc, #160]	@ (80043dc <TIM_TI1_SetConfig+0xcc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01b      	beq.n	8004376 <TIM_TI1_SetConfig+0x66>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004344:	d017      	beq.n	8004376 <TIM_TI1_SetConfig+0x66>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a25      	ldr	r2, [pc, #148]	@ (80043e0 <TIM_TI1_SetConfig+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <TIM_TI1_SetConfig+0x66>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a24      	ldr	r2, [pc, #144]	@ (80043e4 <TIM_TI1_SetConfig+0xd4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00f      	beq.n	8004376 <TIM_TI1_SetConfig+0x66>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a23      	ldr	r2, [pc, #140]	@ (80043e8 <TIM_TI1_SetConfig+0xd8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00b      	beq.n	8004376 <TIM_TI1_SetConfig+0x66>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a22      	ldr	r2, [pc, #136]	@ (80043ec <TIM_TI1_SetConfig+0xdc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d007      	beq.n	8004376 <TIM_TI1_SetConfig+0x66>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <TIM_TI1_SetConfig+0xe0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_TI1_SetConfig+0x66>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a20      	ldr	r2, [pc, #128]	@ (80043f4 <TIM_TI1_SetConfig+0xe4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <TIM_TI1_SetConfig+0x6a>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <TIM_TI1_SetConfig+0x6c>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e003      	b.n	800439a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f023 030a 	bic.w	r3, r3, #10
 80043b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f003 030a 	and.w	r3, r3, #10
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40013400 	.word	0x40013400
 80043f0:	40014000 	.word	0x40014000
 80043f4:	40015000 	.word	0x40015000

080043f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f023 0210 	bic.w	r2, r3, #16
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	031b      	lsls	r3, r3, #12
 800443c:	b29b      	uxth	r3, r3
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800444a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004472:	b480      	push	{r7}
 8004474:	b087      	sub	sp, #28
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80044c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b087      	sub	sp, #28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004516:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004528:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	031b      	lsls	r3, r3, #12
 800452e:	b29b      	uxth	r3, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800453c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	621a      	str	r2, [r3, #32]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e074      	b.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a34      	ldr	r2, [pc, #208]	@ (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a33      	ldr	r2, [pc, #204]	@ (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a31      	ldr	r2, [pc, #196]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d108      	bne.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800460c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800461e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004648:	d01d      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1f      	ldr	r2, [pc, #124]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a15      	ldr	r2, [pc, #84]	@ (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a18      	ldr	r2, [pc, #96]	@ (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a11      	ldr	r2, [pc, #68]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d10c      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800468c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	4313      	orrs	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40015000 	.word	0x40015000
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	40014000 	.word	0x40014000

080046dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e042      	b.n	8004800 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7fc fedb 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2224      	movs	r2, #36	@ 0x24
 8004796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fbb2 	bl	8004f1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f8b3 	bl	8004924 <UART_SetConfig>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e01b      	b.n	8004800 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fc31 	bl	8005060 <UART_CheckIdleState>
 80047fe:	4603      	mov	r3, r0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	@ 0x28
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	2b20      	cmp	r3, #32
 8004820:	d17b      	bne.n	800491a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_UART_Transmit+0x26>
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e074      	b.n	800491c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2221      	movs	r2, #33	@ 0x21
 800483e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004842:	f7fd f857 	bl	80018f4 <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004860:	d108      	bne.n	8004874 <HAL_UART_Transmit+0x6c>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e003      	b.n	800487c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800487c:	e030      	b.n	80048e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2180      	movs	r1, #128	@ 0x80
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fc93 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e03d      	b.n	800491c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	3302      	adds	r3, #2
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e007      	b.n	80048ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1c8      	bne.n	800487e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2140      	movs	r1, #64	@ 0x40
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fc5c 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e006      	b.n	800491c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b08c      	sub	sp, #48	@ 0x30
 800492a:	af00      	add	r7, sp, #0
 800492c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	431a      	orrs	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	431a      	orrs	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	4313      	orrs	r3, r2
 800494a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4baa      	ldr	r3, [pc, #680]	@ (8004bfc <UART_SetConfig+0x2d8>)
 8004954:	4013      	ands	r3, r2
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800495c:	430b      	orrs	r3, r1
 800495e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a9f      	ldr	r2, [pc, #636]	@ (8004c00 <UART_SetConfig+0x2dc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800498c:	4313      	orrs	r3, r2
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800499a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	f023 010f 	bic.w	r1, r3, #15
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a90      	ldr	r2, [pc, #576]	@ (8004c04 <UART_SetConfig+0x2e0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d125      	bne.n	8004a14 <UART_SetConfig+0xf0>
 80049c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004c08 <UART_SetConfig+0x2e4>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d81a      	bhi.n	8004a0c <UART_SetConfig+0xe8>
 80049d6:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <UART_SetConfig+0xb8>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	08004a05 	.word	0x08004a05
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	e116      	b.n	8004c22 <UART_SetConfig+0x2fe>
 80049f4:	2302      	movs	r3, #2
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fa:	e112      	b.n	8004c22 <UART_SetConfig+0x2fe>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a02:	e10e      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	e10a      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a12:	e106      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a7c      	ldr	r2, [pc, #496]	@ (8004c0c <UART_SetConfig+0x2e8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d138      	bne.n	8004a90 <UART_SetConfig+0x16c>
 8004a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c08 <UART_SetConfig+0x2e4>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	d82d      	bhi.n	8004a88 <UART_SetConfig+0x164>
 8004a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <UART_SetConfig+0x110>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004a89 	.word	0x08004a89
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004a89 	.word	0x08004a89
 8004a4c:	08004a89 	.word	0x08004a89
 8004a50:	08004a89 	.word	0x08004a89
 8004a54:	08004a71 	.word	0x08004a71
 8004a58:	08004a89 	.word	0x08004a89
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6e:	e0d8      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004a70:	2302      	movs	r3, #2
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a76:	e0d4      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7e:	e0d0      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004a80:	2308      	movs	r3, #8
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a86:	e0cc      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8e:	e0c8      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a5e      	ldr	r2, [pc, #376]	@ (8004c10 <UART_SetConfig+0x2ec>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d125      	bne.n	8004ae6 <UART_SetConfig+0x1c2>
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004c08 <UART_SetConfig+0x2e4>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004aa4:	2b30      	cmp	r3, #48	@ 0x30
 8004aa6:	d016      	beq.n	8004ad6 <UART_SetConfig+0x1b2>
 8004aa8:	2b30      	cmp	r3, #48	@ 0x30
 8004aaa:	d818      	bhi.n	8004ade <UART_SetConfig+0x1ba>
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d00a      	beq.n	8004ac6 <UART_SetConfig+0x1a2>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d814      	bhi.n	8004ade <UART_SetConfig+0x1ba>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <UART_SetConfig+0x19a>
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d008      	beq.n	8004ace <UART_SetConfig+0x1aa>
 8004abc:	e00f      	b.n	8004ade <UART_SetConfig+0x1ba>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ac4:	e0ad      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004acc:	e0a9      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad4:	e0a5      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004adc:	e0a1      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004ade:	2310      	movs	r3, #16
 8004ae0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae4:	e09d      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a4a      	ldr	r2, [pc, #296]	@ (8004c14 <UART_SetConfig+0x2f0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d125      	bne.n	8004b3c <UART_SetConfig+0x218>
 8004af0:	4b45      	ldr	r3, [pc, #276]	@ (8004c08 <UART_SetConfig+0x2e4>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004afa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004afc:	d016      	beq.n	8004b2c <UART_SetConfig+0x208>
 8004afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b00:	d818      	bhi.n	8004b34 <UART_SetConfig+0x210>
 8004b02:	2b80      	cmp	r3, #128	@ 0x80
 8004b04:	d00a      	beq.n	8004b1c <UART_SetConfig+0x1f8>
 8004b06:	2b80      	cmp	r3, #128	@ 0x80
 8004b08:	d814      	bhi.n	8004b34 <UART_SetConfig+0x210>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <UART_SetConfig+0x1f0>
 8004b0e:	2b40      	cmp	r3, #64	@ 0x40
 8004b10:	d008      	beq.n	8004b24 <UART_SetConfig+0x200>
 8004b12:	e00f      	b.n	8004b34 <UART_SetConfig+0x210>
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b1a:	e082      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b22:	e07e      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b24:	2304      	movs	r3, #4
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2a:	e07a      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b32:	e076      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3a:	e072      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a35      	ldr	r2, [pc, #212]	@ (8004c18 <UART_SetConfig+0x2f4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d12a      	bne.n	8004b9c <UART_SetConfig+0x278>
 8004b46:	4b30      	ldr	r3, [pc, #192]	@ (8004c08 <UART_SetConfig+0x2e4>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b54:	d01a      	beq.n	8004b8c <UART_SetConfig+0x268>
 8004b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b5a:	d81b      	bhi.n	8004b94 <UART_SetConfig+0x270>
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b60:	d00c      	beq.n	8004b7c <UART_SetConfig+0x258>
 8004b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b66:	d815      	bhi.n	8004b94 <UART_SetConfig+0x270>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <UART_SetConfig+0x250>
 8004b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b70:	d008      	beq.n	8004b84 <UART_SetConfig+0x260>
 8004b72:	e00f      	b.n	8004b94 <UART_SetConfig+0x270>
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7a:	e052      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b82:	e04e      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b84:	2304      	movs	r3, #4
 8004b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8a:	e04a      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b92:	e046      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b94:	2310      	movs	r3, #16
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9a:	e042      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a17      	ldr	r2, [pc, #92]	@ (8004c00 <UART_SetConfig+0x2dc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d13a      	bne.n	8004c1c <UART_SetConfig+0x2f8>
 8004ba6:	4b18      	ldr	r3, [pc, #96]	@ (8004c08 <UART_SetConfig+0x2e4>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bb4:	d01a      	beq.n	8004bec <UART_SetConfig+0x2c8>
 8004bb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bba:	d81b      	bhi.n	8004bf4 <UART_SetConfig+0x2d0>
 8004bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc0:	d00c      	beq.n	8004bdc <UART_SetConfig+0x2b8>
 8004bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc6:	d815      	bhi.n	8004bf4 <UART_SetConfig+0x2d0>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <UART_SetConfig+0x2b0>
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd0:	d008      	beq.n	8004be4 <UART_SetConfig+0x2c0>
 8004bd2:	e00f      	b.n	8004bf4 <UART_SetConfig+0x2d0>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bda:	e022      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be2:	e01e      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bea:	e01a      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004bec:	2308      	movs	r3, #8
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf2:	e016      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfa:	e012      	b.n	8004c22 <UART_SetConfig+0x2fe>
 8004bfc:	cfff69f3 	.word	0xcfff69f3
 8004c00:	40008000 	.word	0x40008000
 8004c04:	40013800 	.word	0x40013800
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40004400 	.word	0x40004400
 8004c10:	40004800 	.word	0x40004800
 8004c14:	40004c00 	.word	0x40004c00
 8004c18:	40005000 	.word	0x40005000
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4aae      	ldr	r2, [pc, #696]	@ (8004ee0 <UART_SetConfig+0x5bc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	f040 8097 	bne.w	8004d5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d823      	bhi.n	8004c7e <UART_SetConfig+0x35a>
 8004c36:	a201      	add	r2, pc, #4	@ (adr r2, 8004c3c <UART_SetConfig+0x318>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c6f 	.word	0x08004c6f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c7f 	.word	0x08004c7f
 8004c58:	08004c7f 	.word	0x08004c7f
 8004c5c:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fd fe90 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b9e      	ldr	r3, [pc, #632]	@ (8004ee4 <UART_SetConfig+0x5c0>)
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c6c:	e00d      	b.n	8004c8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fd fe1b 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8004c72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8130 	beq.w	8004ef2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	4a94      	ldr	r2, [pc, #592]	@ (8004ee8 <UART_SetConfig+0x5c4>)
 8004c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	4413      	add	r3, r2
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d305      	bcc.n	8004cc2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d903      	bls.n	8004cca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004cc8:	e113      	b.n	8004ef2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	60fa      	str	r2, [r7, #12]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	4a84      	ldr	r2, [pc, #528]	@ (8004ee8 <UART_SetConfig+0x5c4>)
 8004cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2200      	movs	r2, #0
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cec:	f7fb ff06 	bl	8000afc <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	020b      	lsls	r3, r1, #8
 8004d02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d06:	0202      	lsls	r2, r0, #8
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	6849      	ldr	r1, [r1, #4]
 8004d0c:	0849      	lsrs	r1, r1, #1
 8004d0e:	2000      	movs	r0, #0
 8004d10:	460c      	mov	r4, r1
 8004d12:	4605      	mov	r5, r0
 8004d14:	eb12 0804 	adds.w	r8, r2, r4
 8004d18:	eb43 0905 	adc.w	r9, r3, r5
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	469a      	mov	sl, r3
 8004d24:	4693      	mov	fp, r2
 8004d26:	4652      	mov	r2, sl
 8004d28:	465b      	mov	r3, fp
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	f7fb fee5 	bl	8000afc <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4613      	mov	r3, r2
 8004d38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d40:	d308      	bcc.n	8004d54 <UART_SetConfig+0x430>
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d48:	d204      	bcs.n	8004d54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a3a      	ldr	r2, [r7, #32]
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	e0ce      	b.n	8004ef2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d5a:	e0ca      	b.n	8004ef2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d64:	d166      	bne.n	8004e34 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d827      	bhi.n	8004dbe <UART_SetConfig+0x49a>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <UART_SetConfig+0x450>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	08004dbf 	.word	0x08004dbf
 8004d84:	08004daf 	.word	0x08004daf
 8004d88:	08004dbf 	.word	0x08004dbf
 8004d8c:	08004dbf 	.word	0x08004dbf
 8004d90:	08004dbf 	.word	0x08004dbf
 8004d94:	08004db7 	.word	0x08004db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7fd fdf4 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d9e:	e014      	b.n	8004dca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da0:	f7fd fe06 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8004da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004da6:	e010      	b.n	8004dca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da8:	4b4e      	ldr	r3, [pc, #312]	@ (8004ee4 <UART_SetConfig+0x5c0>)
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dac:	e00d      	b.n	8004dca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dae:	f7fd fd7b 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8004db2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004db4:	e009      	b.n	8004dca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dbc:	e005      	b.n	8004dca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004dc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8090 	beq.w	8004ef2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	4a44      	ldr	r2, [pc, #272]	@ (8004ee8 <UART_SetConfig+0x5c4>)
 8004dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de4:	005a      	lsls	r2, r3, #1
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	441a      	add	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2b0f      	cmp	r3, #15
 8004dfc:	d916      	bls.n	8004e2c <UART_SetConfig+0x508>
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e04:	d212      	bcs.n	8004e2c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f023 030f 	bic.w	r3, r3, #15
 8004e0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	8bfb      	ldrh	r3, [r7, #30]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	8bfa      	ldrh	r2, [r7, #30]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	e062      	b.n	8004ef2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e32:	e05e      	b.n	8004ef2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d828      	bhi.n	8004e8e <UART_SetConfig+0x56a>
 8004e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <UART_SetConfig+0x520>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e8f 	.word	0x08004e8f
 8004e54:	08004e7f 	.word	0x08004e7f
 8004e58:	08004e8f 	.word	0x08004e8f
 8004e5c:	08004e8f 	.word	0x08004e8f
 8004e60:	08004e8f 	.word	0x08004e8f
 8004e64:	08004e87 	.word	0x08004e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7fd fd8c 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e6e:	e014      	b.n	8004e9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7fd fd9e 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8004e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e76:	e010      	b.n	8004e9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee4 <UART_SetConfig+0x5c0>)
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e7c:	e00d      	b.n	8004e9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7e:	f7fd fd13 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8004e82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e84:	e009      	b.n	8004e9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e8c:	e005      	b.n	8004e9a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e98:	bf00      	nop
    }

    if (pclk != 0U)
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d028      	beq.n	8004ef2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	4a10      	ldr	r2, [pc, #64]	@ (8004ee8 <UART_SetConfig+0x5c4>)
 8004ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	441a      	add	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	2b0f      	cmp	r3, #15
 8004ec8:	d910      	bls.n	8004eec <UART_SetConfig+0x5c8>
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed0:	d20c      	bcs.n	8004eec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	e009      	b.n	8004ef2 <UART_SetConfig+0x5ce>
 8004ede:	bf00      	nop
 8004ee0:	40008000 	.word	0x40008000
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	080064ec 	.word	0x080064ec
      }
      else
      {
        ret = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f0e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3730      	adds	r7, #48	@ 0x30
 8004f16:	46bd      	mov	sp, r7
 8004f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01a      	beq.n	8005032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800501a:	d10a      	bne.n	8005032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b098      	sub	sp, #96	@ 0x60
 8005064:	af02      	add	r7, sp, #8
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005070:	f7fc fc40 	bl	80018f4 <HAL_GetTick>
 8005074:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b08      	cmp	r3, #8
 8005082:	d12f      	bne.n	80050e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005084:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f88e 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d022      	beq.n	80050e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e6      	bne.n	800509e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e063      	b.n	80051ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d149      	bne.n	8005186 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fa:	2200      	movs	r2, #0
 80050fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f857 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d03c      	beq.n	8005186 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	623b      	str	r3, [r7, #32]
   return(result);
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800512a:	633b      	str	r3, [r7, #48]	@ 0x30
 800512c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	60fb      	str	r3, [r7, #12]
   return(result);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800515e:	61fa      	str	r2, [r7, #28]
 8005160:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	69b9      	ldr	r1, [r7, #24]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	617b      	str	r3, [r7, #20]
   return(result);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e5      	bne.n	800513e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e012      	b.n	80051ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3758      	adds	r7, #88	@ 0x58
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c4:	e04f      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d04b      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fc fb91 	bl	80018f4 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e04e      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d037      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b80      	cmp	r3, #128	@ 0x80
 80051fa:	d034      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b40      	cmp	r3, #64	@ 0x40
 8005200:	d031      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b08      	cmp	r3, #8
 800520e:	d110      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2208      	movs	r2, #8
 8005216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f838 	bl	800528e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2208      	movs	r2, #8
 8005222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e029      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005240:	d111      	bne.n	8005266 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800524a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f81e 	bl	800528e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e00f      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	429a      	cmp	r2, r3
 8005282:	d0a0      	beq.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800528e:	b480      	push	{r7}
 8005290:	b095      	sub	sp, #84	@ 0x54
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e3      	bne.n	80052c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d118      	bne.n	800533a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	60bb      	str	r3, [r7, #8]
   return(result);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f023 0310 	bic.w	r3, r3, #16
 800531c:	647b      	str	r3, [r7, #68]	@ 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6979      	ldr	r1, [r7, #20]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	613b      	str	r3, [r7, #16]
   return(result);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e6      	bne.n	8005308 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800534e:	bf00      	nop
 8005350:	3754      	adds	r7, #84	@ 0x54
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_UARTEx_DisableFifoMode+0x16>
 800536c:	2302      	movs	r3, #2
 800536e:	e027      	b.n	80053c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2224      	movs	r2, #36	@ 0x24
 800537c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800539e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e02d      	b.n	8005440 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2224      	movs	r2, #36	@ 0x24
 80053f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f84f 	bl	80054c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800545c:	2302      	movs	r3, #2
 800545e:	e02d      	b.n	80054bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	@ 0x24
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f811 	bl	80054c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d108      	bne.n	80054e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054e4:	e031      	b.n	800554a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054e6:	2308      	movs	r3, #8
 80054e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054ea:	2308      	movs	r3, #8
 80054ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	0e5b      	lsrs	r3, r3, #25
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	0f5b      	lsrs	r3, r3, #29
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800550e:	7bbb      	ldrb	r3, [r7, #14]
 8005510:	7b3a      	ldrb	r2, [r7, #12]
 8005512:	4911      	ldr	r1, [pc, #68]	@ (8005558 <UARTEx_SetNbDataToProcess+0x94>)
 8005514:	5c8a      	ldrb	r2, [r1, r2]
 8005516:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800551a:	7b3a      	ldrb	r2, [r7, #12]
 800551c:	490f      	ldr	r1, [pc, #60]	@ (800555c <UARTEx_SetNbDataToProcess+0x98>)
 800551e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005520:	fb93 f3f2 	sdiv	r3, r3, r2
 8005524:	b29a      	uxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	7b7a      	ldrb	r2, [r7, #13]
 8005530:	4909      	ldr	r1, [pc, #36]	@ (8005558 <UARTEx_SetNbDataToProcess+0x94>)
 8005532:	5c8a      	ldrb	r2, [r1, r2]
 8005534:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005538:	7b7a      	ldrb	r2, [r7, #13]
 800553a:	4908      	ldr	r1, [pc, #32]	@ (800555c <UARTEx_SetNbDataToProcess+0x98>)
 800553c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800553e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	08006504 	.word	0x08006504
 800555c:	0800650c 	.word	0x0800650c

08005560 <std>:
 8005560:	2300      	movs	r3, #0
 8005562:	b510      	push	{r4, lr}
 8005564:	4604      	mov	r4, r0
 8005566:	e9c0 3300 	strd	r3, r3, [r0]
 800556a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800556e:	6083      	str	r3, [r0, #8]
 8005570:	8181      	strh	r1, [r0, #12]
 8005572:	6643      	str	r3, [r0, #100]	@ 0x64
 8005574:	81c2      	strh	r2, [r0, #14]
 8005576:	6183      	str	r3, [r0, #24]
 8005578:	4619      	mov	r1, r3
 800557a:	2208      	movs	r2, #8
 800557c:	305c      	adds	r0, #92	@ 0x5c
 800557e:	f000 f9f9 	bl	8005974 <memset>
 8005582:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <std+0x58>)
 8005584:	6263      	str	r3, [r4, #36]	@ 0x24
 8005586:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <std+0x5c>)
 8005588:	62a3      	str	r3, [r4, #40]	@ 0x28
 800558a:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <std+0x60>)
 800558c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800558e:	4b0d      	ldr	r3, [pc, #52]	@ (80055c4 <std+0x64>)
 8005590:	6323      	str	r3, [r4, #48]	@ 0x30
 8005592:	4b0d      	ldr	r3, [pc, #52]	@ (80055c8 <std+0x68>)
 8005594:	6224      	str	r4, [r4, #32]
 8005596:	429c      	cmp	r4, r3
 8005598:	d006      	beq.n	80055a8 <std+0x48>
 800559a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800559e:	4294      	cmp	r4, r2
 80055a0:	d002      	beq.n	80055a8 <std+0x48>
 80055a2:	33d0      	adds	r3, #208	@ 0xd0
 80055a4:	429c      	cmp	r4, r3
 80055a6:	d105      	bne.n	80055b4 <std+0x54>
 80055a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b0:	f000 ba58 	b.w	8005a64 <__retarget_lock_init_recursive>
 80055b4:	bd10      	pop	{r4, pc}
 80055b6:	bf00      	nop
 80055b8:	080057c5 	.word	0x080057c5
 80055bc:	080057e7 	.word	0x080057e7
 80055c0:	0800581f 	.word	0x0800581f
 80055c4:	08005843 	.word	0x08005843
 80055c8:	200001d0 	.word	0x200001d0

080055cc <stdio_exit_handler>:
 80055cc:	4a02      	ldr	r2, [pc, #8]	@ (80055d8 <stdio_exit_handler+0xc>)
 80055ce:	4903      	ldr	r1, [pc, #12]	@ (80055dc <stdio_exit_handler+0x10>)
 80055d0:	4803      	ldr	r0, [pc, #12]	@ (80055e0 <stdio_exit_handler+0x14>)
 80055d2:	f000 b869 	b.w	80056a8 <_fwalk_sglue>
 80055d6:	bf00      	nop
 80055d8:	2000000c 	.word	0x2000000c
 80055dc:	08006301 	.word	0x08006301
 80055e0:	2000001c 	.word	0x2000001c

080055e4 <cleanup_stdio>:
 80055e4:	6841      	ldr	r1, [r0, #4]
 80055e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005618 <cleanup_stdio+0x34>)
 80055e8:	4299      	cmp	r1, r3
 80055ea:	b510      	push	{r4, lr}
 80055ec:	4604      	mov	r4, r0
 80055ee:	d001      	beq.n	80055f4 <cleanup_stdio+0x10>
 80055f0:	f000 fe86 	bl	8006300 <_fflush_r>
 80055f4:	68a1      	ldr	r1, [r4, #8]
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <cleanup_stdio+0x38>)
 80055f8:	4299      	cmp	r1, r3
 80055fa:	d002      	beq.n	8005602 <cleanup_stdio+0x1e>
 80055fc:	4620      	mov	r0, r4
 80055fe:	f000 fe7f 	bl	8006300 <_fflush_r>
 8005602:	68e1      	ldr	r1, [r4, #12]
 8005604:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <cleanup_stdio+0x3c>)
 8005606:	4299      	cmp	r1, r3
 8005608:	d004      	beq.n	8005614 <cleanup_stdio+0x30>
 800560a:	4620      	mov	r0, r4
 800560c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005610:	f000 be76 	b.w	8006300 <_fflush_r>
 8005614:	bd10      	pop	{r4, pc}
 8005616:	bf00      	nop
 8005618:	200001d0 	.word	0x200001d0
 800561c:	20000238 	.word	0x20000238
 8005620:	200002a0 	.word	0x200002a0

08005624 <global_stdio_init.part.0>:
 8005624:	b510      	push	{r4, lr}
 8005626:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <global_stdio_init.part.0+0x30>)
 8005628:	4c0b      	ldr	r4, [pc, #44]	@ (8005658 <global_stdio_init.part.0+0x34>)
 800562a:	4a0c      	ldr	r2, [pc, #48]	@ (800565c <global_stdio_init.part.0+0x38>)
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	4620      	mov	r0, r4
 8005630:	2200      	movs	r2, #0
 8005632:	2104      	movs	r1, #4
 8005634:	f7ff ff94 	bl	8005560 <std>
 8005638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800563c:	2201      	movs	r2, #1
 800563e:	2109      	movs	r1, #9
 8005640:	f7ff ff8e 	bl	8005560 <std>
 8005644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005648:	2202      	movs	r2, #2
 800564a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800564e:	2112      	movs	r1, #18
 8005650:	f7ff bf86 	b.w	8005560 <std>
 8005654:	20000308 	.word	0x20000308
 8005658:	200001d0 	.word	0x200001d0
 800565c:	080055cd 	.word	0x080055cd

08005660 <__sfp_lock_acquire>:
 8005660:	4801      	ldr	r0, [pc, #4]	@ (8005668 <__sfp_lock_acquire+0x8>)
 8005662:	f000 ba00 	b.w	8005a66 <__retarget_lock_acquire_recursive>
 8005666:	bf00      	nop
 8005668:	20000311 	.word	0x20000311

0800566c <__sfp_lock_release>:
 800566c:	4801      	ldr	r0, [pc, #4]	@ (8005674 <__sfp_lock_release+0x8>)
 800566e:	f000 b9fb 	b.w	8005a68 <__retarget_lock_release_recursive>
 8005672:	bf00      	nop
 8005674:	20000311 	.word	0x20000311

08005678 <__sinit>:
 8005678:	b510      	push	{r4, lr}
 800567a:	4604      	mov	r4, r0
 800567c:	f7ff fff0 	bl	8005660 <__sfp_lock_acquire>
 8005680:	6a23      	ldr	r3, [r4, #32]
 8005682:	b11b      	cbz	r3, 800568c <__sinit+0x14>
 8005684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005688:	f7ff bff0 	b.w	800566c <__sfp_lock_release>
 800568c:	4b04      	ldr	r3, [pc, #16]	@ (80056a0 <__sinit+0x28>)
 800568e:	6223      	str	r3, [r4, #32]
 8005690:	4b04      	ldr	r3, [pc, #16]	@ (80056a4 <__sinit+0x2c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f5      	bne.n	8005684 <__sinit+0xc>
 8005698:	f7ff ffc4 	bl	8005624 <global_stdio_init.part.0>
 800569c:	e7f2      	b.n	8005684 <__sinit+0xc>
 800569e:	bf00      	nop
 80056a0:	080055e5 	.word	0x080055e5
 80056a4:	20000308 	.word	0x20000308

080056a8 <_fwalk_sglue>:
 80056a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ac:	4607      	mov	r7, r0
 80056ae:	4688      	mov	r8, r1
 80056b0:	4614      	mov	r4, r2
 80056b2:	2600      	movs	r6, #0
 80056b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056b8:	f1b9 0901 	subs.w	r9, r9, #1
 80056bc:	d505      	bpl.n	80056ca <_fwalk_sglue+0x22>
 80056be:	6824      	ldr	r4, [r4, #0]
 80056c0:	2c00      	cmp	r4, #0
 80056c2:	d1f7      	bne.n	80056b4 <_fwalk_sglue+0xc>
 80056c4:	4630      	mov	r0, r6
 80056c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ca:	89ab      	ldrh	r3, [r5, #12]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d907      	bls.n	80056e0 <_fwalk_sglue+0x38>
 80056d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056d4:	3301      	adds	r3, #1
 80056d6:	d003      	beq.n	80056e0 <_fwalk_sglue+0x38>
 80056d8:	4629      	mov	r1, r5
 80056da:	4638      	mov	r0, r7
 80056dc:	47c0      	blx	r8
 80056de:	4306      	orrs	r6, r0
 80056e0:	3568      	adds	r5, #104	@ 0x68
 80056e2:	e7e9      	b.n	80056b8 <_fwalk_sglue+0x10>

080056e4 <iprintf>:
 80056e4:	b40f      	push	{r0, r1, r2, r3}
 80056e6:	b507      	push	{r0, r1, r2, lr}
 80056e8:	4906      	ldr	r1, [pc, #24]	@ (8005704 <iprintf+0x20>)
 80056ea:	ab04      	add	r3, sp, #16
 80056ec:	6808      	ldr	r0, [r1, #0]
 80056ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80056f2:	6881      	ldr	r1, [r0, #8]
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	f000 fadb 	bl	8005cb0 <_vfiprintf_r>
 80056fa:	b003      	add	sp, #12
 80056fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005700:	b004      	add	sp, #16
 8005702:	4770      	bx	lr
 8005704:	20000018 	.word	0x20000018

08005708 <_puts_r>:
 8005708:	6a03      	ldr	r3, [r0, #32]
 800570a:	b570      	push	{r4, r5, r6, lr}
 800570c:	6884      	ldr	r4, [r0, #8]
 800570e:	4605      	mov	r5, r0
 8005710:	460e      	mov	r6, r1
 8005712:	b90b      	cbnz	r3, 8005718 <_puts_r+0x10>
 8005714:	f7ff ffb0 	bl	8005678 <__sinit>
 8005718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800571a:	07db      	lsls	r3, r3, #31
 800571c:	d405      	bmi.n	800572a <_puts_r+0x22>
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	0598      	lsls	r0, r3, #22
 8005722:	d402      	bmi.n	800572a <_puts_r+0x22>
 8005724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005726:	f000 f99e 	bl	8005a66 <__retarget_lock_acquire_recursive>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	0719      	lsls	r1, r3, #28
 800572e:	d502      	bpl.n	8005736 <_puts_r+0x2e>
 8005730:	6923      	ldr	r3, [r4, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d135      	bne.n	80057a2 <_puts_r+0x9a>
 8005736:	4621      	mov	r1, r4
 8005738:	4628      	mov	r0, r5
 800573a:	f000 f8c5 	bl	80058c8 <__swsetup_r>
 800573e:	b380      	cbz	r0, 80057a2 <_puts_r+0x9a>
 8005740:	f04f 35ff 	mov.w	r5, #4294967295
 8005744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005746:	07da      	lsls	r2, r3, #31
 8005748:	d405      	bmi.n	8005756 <_puts_r+0x4e>
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	059b      	lsls	r3, r3, #22
 800574e:	d402      	bmi.n	8005756 <_puts_r+0x4e>
 8005750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005752:	f000 f989 	bl	8005a68 <__retarget_lock_release_recursive>
 8005756:	4628      	mov	r0, r5
 8005758:	bd70      	pop	{r4, r5, r6, pc}
 800575a:	2b00      	cmp	r3, #0
 800575c:	da04      	bge.n	8005768 <_puts_r+0x60>
 800575e:	69a2      	ldr	r2, [r4, #24]
 8005760:	429a      	cmp	r2, r3
 8005762:	dc17      	bgt.n	8005794 <_puts_r+0x8c>
 8005764:	290a      	cmp	r1, #10
 8005766:	d015      	beq.n	8005794 <_puts_r+0x8c>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	6022      	str	r2, [r4, #0]
 800576e:	7019      	strb	r1, [r3, #0]
 8005770:	68a3      	ldr	r3, [r4, #8]
 8005772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005776:	3b01      	subs	r3, #1
 8005778:	60a3      	str	r3, [r4, #8]
 800577a:	2900      	cmp	r1, #0
 800577c:	d1ed      	bne.n	800575a <_puts_r+0x52>
 800577e:	2b00      	cmp	r3, #0
 8005780:	da11      	bge.n	80057a6 <_puts_r+0x9e>
 8005782:	4622      	mov	r2, r4
 8005784:	210a      	movs	r1, #10
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f85f 	bl	800584a <__swbuf_r>
 800578c:	3001      	adds	r0, #1
 800578e:	d0d7      	beq.n	8005740 <_puts_r+0x38>
 8005790:	250a      	movs	r5, #10
 8005792:	e7d7      	b.n	8005744 <_puts_r+0x3c>
 8005794:	4622      	mov	r2, r4
 8005796:	4628      	mov	r0, r5
 8005798:	f000 f857 	bl	800584a <__swbuf_r>
 800579c:	3001      	adds	r0, #1
 800579e:	d1e7      	bne.n	8005770 <_puts_r+0x68>
 80057a0:	e7ce      	b.n	8005740 <_puts_r+0x38>
 80057a2:	3e01      	subs	r6, #1
 80057a4:	e7e4      	b.n	8005770 <_puts_r+0x68>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	6022      	str	r2, [r4, #0]
 80057ac:	220a      	movs	r2, #10
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e7ee      	b.n	8005790 <_puts_r+0x88>
	...

080057b4 <puts>:
 80057b4:	4b02      	ldr	r3, [pc, #8]	@ (80057c0 <puts+0xc>)
 80057b6:	4601      	mov	r1, r0
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	f7ff bfa5 	b.w	8005708 <_puts_r>
 80057be:	bf00      	nop
 80057c0:	20000018 	.word	0x20000018

080057c4 <__sread>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	460c      	mov	r4, r1
 80057c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057cc:	f000 f8fc 	bl	80059c8 <_read_r>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	bfab      	itete	ge
 80057d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057d6:	89a3      	ldrhlt	r3, [r4, #12]
 80057d8:	181b      	addge	r3, r3, r0
 80057da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057de:	bfac      	ite	ge
 80057e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057e2:	81a3      	strhlt	r3, [r4, #12]
 80057e4:	bd10      	pop	{r4, pc}

080057e6 <__swrite>:
 80057e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ea:	461f      	mov	r7, r3
 80057ec:	898b      	ldrh	r3, [r1, #12]
 80057ee:	05db      	lsls	r3, r3, #23
 80057f0:	4605      	mov	r5, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	4616      	mov	r6, r2
 80057f6:	d505      	bpl.n	8005804 <__swrite+0x1e>
 80057f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fc:	2302      	movs	r3, #2
 80057fe:	2200      	movs	r2, #0
 8005800:	f000 f8d0 	bl	80059a4 <_lseek_r>
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800580a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800580e:	81a3      	strh	r3, [r4, #12]
 8005810:	4632      	mov	r2, r6
 8005812:	463b      	mov	r3, r7
 8005814:	4628      	mov	r0, r5
 8005816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800581a:	f000 b8e7 	b.w	80059ec <_write_r>

0800581e <__sseek>:
 800581e:	b510      	push	{r4, lr}
 8005820:	460c      	mov	r4, r1
 8005822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005826:	f000 f8bd 	bl	80059a4 <_lseek_r>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	bf15      	itete	ne
 8005830:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005832:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005836:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800583a:	81a3      	strheq	r3, [r4, #12]
 800583c:	bf18      	it	ne
 800583e:	81a3      	strhne	r3, [r4, #12]
 8005840:	bd10      	pop	{r4, pc}

08005842 <__sclose>:
 8005842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005846:	f000 b89d 	b.w	8005984 <_close_r>

0800584a <__swbuf_r>:
 800584a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584c:	460e      	mov	r6, r1
 800584e:	4614      	mov	r4, r2
 8005850:	4605      	mov	r5, r0
 8005852:	b118      	cbz	r0, 800585c <__swbuf_r+0x12>
 8005854:	6a03      	ldr	r3, [r0, #32]
 8005856:	b90b      	cbnz	r3, 800585c <__swbuf_r+0x12>
 8005858:	f7ff ff0e 	bl	8005678 <__sinit>
 800585c:	69a3      	ldr	r3, [r4, #24]
 800585e:	60a3      	str	r3, [r4, #8]
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	071a      	lsls	r2, r3, #28
 8005864:	d501      	bpl.n	800586a <__swbuf_r+0x20>
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	b943      	cbnz	r3, 800587c <__swbuf_r+0x32>
 800586a:	4621      	mov	r1, r4
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f82b 	bl	80058c8 <__swsetup_r>
 8005872:	b118      	cbz	r0, 800587c <__swbuf_r+0x32>
 8005874:	f04f 37ff 	mov.w	r7, #4294967295
 8005878:	4638      	mov	r0, r7
 800587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	6922      	ldr	r2, [r4, #16]
 8005880:	1a98      	subs	r0, r3, r2
 8005882:	6963      	ldr	r3, [r4, #20]
 8005884:	b2f6      	uxtb	r6, r6
 8005886:	4283      	cmp	r3, r0
 8005888:	4637      	mov	r7, r6
 800588a:	dc05      	bgt.n	8005898 <__swbuf_r+0x4e>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 fd36 	bl	8006300 <_fflush_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	d1ed      	bne.n	8005874 <__swbuf_r+0x2a>
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	3b01      	subs	r3, #1
 800589c:	60a3      	str	r3, [r4, #8]
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	6022      	str	r2, [r4, #0]
 80058a4:	701e      	strb	r6, [r3, #0]
 80058a6:	6962      	ldr	r2, [r4, #20]
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d004      	beq.n	80058b8 <__swbuf_r+0x6e>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	07db      	lsls	r3, r3, #31
 80058b2:	d5e1      	bpl.n	8005878 <__swbuf_r+0x2e>
 80058b4:	2e0a      	cmp	r6, #10
 80058b6:	d1df      	bne.n	8005878 <__swbuf_r+0x2e>
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 fd20 	bl	8006300 <_fflush_r>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d0d9      	beq.n	8005878 <__swbuf_r+0x2e>
 80058c4:	e7d6      	b.n	8005874 <__swbuf_r+0x2a>
	...

080058c8 <__swsetup_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4b29      	ldr	r3, [pc, #164]	@ (8005970 <__swsetup_r+0xa8>)
 80058cc:	4605      	mov	r5, r0
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	460c      	mov	r4, r1
 80058d2:	b118      	cbz	r0, 80058dc <__swsetup_r+0x14>
 80058d4:	6a03      	ldr	r3, [r0, #32]
 80058d6:	b90b      	cbnz	r3, 80058dc <__swsetup_r+0x14>
 80058d8:	f7ff fece 	bl	8005678 <__sinit>
 80058dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e0:	0719      	lsls	r1, r3, #28
 80058e2:	d422      	bmi.n	800592a <__swsetup_r+0x62>
 80058e4:	06da      	lsls	r2, r3, #27
 80058e6:	d407      	bmi.n	80058f8 <__swsetup_r+0x30>
 80058e8:	2209      	movs	r2, #9
 80058ea:	602a      	str	r2, [r5, #0]
 80058ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f0:	81a3      	strh	r3, [r4, #12]
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	e033      	b.n	8005960 <__swsetup_r+0x98>
 80058f8:	0758      	lsls	r0, r3, #29
 80058fa:	d512      	bpl.n	8005922 <__swsetup_r+0x5a>
 80058fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058fe:	b141      	cbz	r1, 8005912 <__swsetup_r+0x4a>
 8005900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005904:	4299      	cmp	r1, r3
 8005906:	d002      	beq.n	800590e <__swsetup_r+0x46>
 8005908:	4628      	mov	r0, r5
 800590a:	f000 f8af 	bl	8005a6c <_free_r>
 800590e:	2300      	movs	r3, #0
 8005910:	6363      	str	r3, [r4, #52]	@ 0x34
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	2300      	movs	r3, #0
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	f043 0308 	orr.w	r3, r3, #8
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	b94b      	cbnz	r3, 8005942 <__swsetup_r+0x7a>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005938:	d003      	beq.n	8005942 <__swsetup_r+0x7a>
 800593a:	4621      	mov	r1, r4
 800593c:	4628      	mov	r0, r5
 800593e:	f000 fd2d 	bl	800639c <__smakebuf_r>
 8005942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005946:	f013 0201 	ands.w	r2, r3, #1
 800594a:	d00a      	beq.n	8005962 <__swsetup_r+0x9a>
 800594c:	2200      	movs	r2, #0
 800594e:	60a2      	str	r2, [r4, #8]
 8005950:	6962      	ldr	r2, [r4, #20]
 8005952:	4252      	negs	r2, r2
 8005954:	61a2      	str	r2, [r4, #24]
 8005956:	6922      	ldr	r2, [r4, #16]
 8005958:	b942      	cbnz	r2, 800596c <__swsetup_r+0xa4>
 800595a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800595e:	d1c5      	bne.n	80058ec <__swsetup_r+0x24>
 8005960:	bd38      	pop	{r3, r4, r5, pc}
 8005962:	0799      	lsls	r1, r3, #30
 8005964:	bf58      	it	pl
 8005966:	6962      	ldrpl	r2, [r4, #20]
 8005968:	60a2      	str	r2, [r4, #8]
 800596a:	e7f4      	b.n	8005956 <__swsetup_r+0x8e>
 800596c:	2000      	movs	r0, #0
 800596e:	e7f7      	b.n	8005960 <__swsetup_r+0x98>
 8005970:	20000018 	.word	0x20000018

08005974 <memset>:
 8005974:	4402      	add	r2, r0
 8005976:	4603      	mov	r3, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	f803 1b01 	strb.w	r1, [r3], #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <_close_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d06      	ldr	r5, [pc, #24]	@ (80059a0 <_close_r+0x1c>)
 8005988:	2300      	movs	r3, #0
 800598a:	4604      	mov	r4, r0
 800598c:	4608      	mov	r0, r1
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	f7fb fea5 	bl	80016de <_close>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_close_r+0x1a>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_close_r+0x1a>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	2000030c 	.word	0x2000030c

080059a4 <_lseek_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d07      	ldr	r5, [pc, #28]	@ (80059c4 <_lseek_r+0x20>)
 80059a8:	4604      	mov	r4, r0
 80059aa:	4608      	mov	r0, r1
 80059ac:	4611      	mov	r1, r2
 80059ae:	2200      	movs	r2, #0
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7fb feba 	bl	800172c <_lseek>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_lseek_r+0x1e>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_lseek_r+0x1e>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	2000030c 	.word	0x2000030c

080059c8 <_read_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d07      	ldr	r5, [pc, #28]	@ (80059e8 <_read_r+0x20>)
 80059cc:	4604      	mov	r4, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	4611      	mov	r1, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fb fe48 	bl	800166c <_read>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_read_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_read_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	2000030c 	.word	0x2000030c

080059ec <_write_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4d07      	ldr	r5, [pc, #28]	@ (8005a0c <_write_r+0x20>)
 80059f0:	4604      	mov	r4, r0
 80059f2:	4608      	mov	r0, r1
 80059f4:	4611      	mov	r1, r2
 80059f6:	2200      	movs	r2, #0
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f7fb fe53 	bl	80016a6 <_write>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_write_r+0x1e>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_write_r+0x1e>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	2000030c 	.word	0x2000030c

08005a10 <__errno>:
 8005a10:	4b01      	ldr	r3, [pc, #4]	@ (8005a18 <__errno+0x8>)
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	20000018 	.word	0x20000018

08005a1c <__libc_init_array>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a54 <__libc_init_array+0x38>)
 8005a20:	4c0d      	ldr	r4, [pc, #52]	@ (8005a58 <__libc_init_array+0x3c>)
 8005a22:	1b64      	subs	r4, r4, r5
 8005a24:	10a4      	asrs	r4, r4, #2
 8005a26:	2600      	movs	r6, #0
 8005a28:	42a6      	cmp	r6, r4
 8005a2a:	d109      	bne.n	8005a40 <__libc_init_array+0x24>
 8005a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a5c <__libc_init_array+0x40>)
 8005a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a60 <__libc_init_array+0x44>)
 8005a30:	f000 fd22 	bl	8006478 <_init>
 8005a34:	1b64      	subs	r4, r4, r5
 8005a36:	10a4      	asrs	r4, r4, #2
 8005a38:	2600      	movs	r6, #0
 8005a3a:	42a6      	cmp	r6, r4
 8005a3c:	d105      	bne.n	8005a4a <__libc_init_array+0x2e>
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a44:	4798      	blx	r3
 8005a46:	3601      	adds	r6, #1
 8005a48:	e7ee      	b.n	8005a28 <__libc_init_array+0xc>
 8005a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4e:	4798      	blx	r3
 8005a50:	3601      	adds	r6, #1
 8005a52:	e7f2      	b.n	8005a3a <__libc_init_array+0x1e>
 8005a54:	08006550 	.word	0x08006550
 8005a58:	08006550 	.word	0x08006550
 8005a5c:	08006550 	.word	0x08006550
 8005a60:	08006554 	.word	0x08006554

08005a64 <__retarget_lock_init_recursive>:
 8005a64:	4770      	bx	lr

08005a66 <__retarget_lock_acquire_recursive>:
 8005a66:	4770      	bx	lr

08005a68 <__retarget_lock_release_recursive>:
 8005a68:	4770      	bx	lr
	...

08005a6c <_free_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4605      	mov	r5, r0
 8005a70:	2900      	cmp	r1, #0
 8005a72:	d041      	beq.n	8005af8 <_free_r+0x8c>
 8005a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a78:	1f0c      	subs	r4, r1, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bfb8      	it	lt
 8005a7e:	18e4      	addlt	r4, r4, r3
 8005a80:	f000 f8e0 	bl	8005c44 <__malloc_lock>
 8005a84:	4a1d      	ldr	r2, [pc, #116]	@ (8005afc <_free_r+0x90>)
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	b933      	cbnz	r3, 8005a98 <_free_r+0x2c>
 8005a8a:	6063      	str	r3, [r4, #4]
 8005a8c:	6014      	str	r4, [r2, #0]
 8005a8e:	4628      	mov	r0, r5
 8005a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a94:	f000 b8dc 	b.w	8005c50 <__malloc_unlock>
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	d908      	bls.n	8005aae <_free_r+0x42>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	1821      	adds	r1, r4, r0
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	bf01      	itttt	eq
 8005aa4:	6819      	ldreq	r1, [r3, #0]
 8005aa6:	685b      	ldreq	r3, [r3, #4]
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	e7ed      	b.n	8005a8a <_free_r+0x1e>
 8005aae:	461a      	mov	r2, r3
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	b10b      	cbz	r3, 8005ab8 <_free_r+0x4c>
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	d9fa      	bls.n	8005aae <_free_r+0x42>
 8005ab8:	6811      	ldr	r1, [r2, #0]
 8005aba:	1850      	adds	r0, r2, r1
 8005abc:	42a0      	cmp	r0, r4
 8005abe:	d10b      	bne.n	8005ad8 <_free_r+0x6c>
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	4401      	add	r1, r0
 8005ac4:	1850      	adds	r0, r2, r1
 8005ac6:	4283      	cmp	r3, r0
 8005ac8:	6011      	str	r1, [r2, #0]
 8005aca:	d1e0      	bne.n	8005a8e <_free_r+0x22>
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	6053      	str	r3, [r2, #4]
 8005ad2:	4408      	add	r0, r1
 8005ad4:	6010      	str	r0, [r2, #0]
 8005ad6:	e7da      	b.n	8005a8e <_free_r+0x22>
 8005ad8:	d902      	bls.n	8005ae0 <_free_r+0x74>
 8005ada:	230c      	movs	r3, #12
 8005adc:	602b      	str	r3, [r5, #0]
 8005ade:	e7d6      	b.n	8005a8e <_free_r+0x22>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	1821      	adds	r1, r4, r0
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf04      	itt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	6063      	str	r3, [r4, #4]
 8005aee:	bf04      	itt	eq
 8005af0:	1809      	addeq	r1, r1, r0
 8005af2:	6021      	streq	r1, [r4, #0]
 8005af4:	6054      	str	r4, [r2, #4]
 8005af6:	e7ca      	b.n	8005a8e <_free_r+0x22>
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	bf00      	nop
 8005afc:	20000318 	.word	0x20000318

08005b00 <sbrk_aligned>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	4e0f      	ldr	r6, [pc, #60]	@ (8005b40 <sbrk_aligned+0x40>)
 8005b04:	460c      	mov	r4, r1
 8005b06:	6831      	ldr	r1, [r6, #0]
 8005b08:	4605      	mov	r5, r0
 8005b0a:	b911      	cbnz	r1, 8005b12 <sbrk_aligned+0x12>
 8005b0c:	f000 fca4 	bl	8006458 <_sbrk_r>
 8005b10:	6030      	str	r0, [r6, #0]
 8005b12:	4621      	mov	r1, r4
 8005b14:	4628      	mov	r0, r5
 8005b16:	f000 fc9f 	bl	8006458 <_sbrk_r>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	d103      	bne.n	8005b26 <sbrk_aligned+0x26>
 8005b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b22:	4620      	mov	r0, r4
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	1cc4      	adds	r4, r0, #3
 8005b28:	f024 0403 	bic.w	r4, r4, #3
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d0f8      	beq.n	8005b22 <sbrk_aligned+0x22>
 8005b30:	1a21      	subs	r1, r4, r0
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 fc90 	bl	8006458 <_sbrk_r>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d1f2      	bne.n	8005b22 <sbrk_aligned+0x22>
 8005b3c:	e7ef      	b.n	8005b1e <sbrk_aligned+0x1e>
 8005b3e:	bf00      	nop
 8005b40:	20000314 	.word	0x20000314

08005b44 <_malloc_r>:
 8005b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b48:	1ccd      	adds	r5, r1, #3
 8005b4a:	f025 0503 	bic.w	r5, r5, #3
 8005b4e:	3508      	adds	r5, #8
 8005b50:	2d0c      	cmp	r5, #12
 8005b52:	bf38      	it	cc
 8005b54:	250c      	movcc	r5, #12
 8005b56:	2d00      	cmp	r5, #0
 8005b58:	4606      	mov	r6, r0
 8005b5a:	db01      	blt.n	8005b60 <_malloc_r+0x1c>
 8005b5c:	42a9      	cmp	r1, r5
 8005b5e:	d904      	bls.n	8005b6a <_malloc_r+0x26>
 8005b60:	230c      	movs	r3, #12
 8005b62:	6033      	str	r3, [r6, #0]
 8005b64:	2000      	movs	r0, #0
 8005b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c40 <_malloc_r+0xfc>
 8005b6e:	f000 f869 	bl	8005c44 <__malloc_lock>
 8005b72:	f8d8 3000 	ldr.w	r3, [r8]
 8005b76:	461c      	mov	r4, r3
 8005b78:	bb44      	cbnz	r4, 8005bcc <_malloc_r+0x88>
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f7ff ffbf 	bl	8005b00 <sbrk_aligned>
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	4604      	mov	r4, r0
 8005b86:	d158      	bne.n	8005c3a <_malloc_r+0xf6>
 8005b88:	f8d8 4000 	ldr.w	r4, [r8]
 8005b8c:	4627      	mov	r7, r4
 8005b8e:	2f00      	cmp	r7, #0
 8005b90:	d143      	bne.n	8005c1a <_malloc_r+0xd6>
 8005b92:	2c00      	cmp	r4, #0
 8005b94:	d04b      	beq.n	8005c2e <_malloc_r+0xea>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	4639      	mov	r1, r7
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	eb04 0903 	add.w	r9, r4, r3
 8005ba0:	f000 fc5a 	bl	8006458 <_sbrk_r>
 8005ba4:	4581      	cmp	r9, r0
 8005ba6:	d142      	bne.n	8005c2e <_malloc_r+0xea>
 8005ba8:	6821      	ldr	r1, [r4, #0]
 8005baa:	1a6d      	subs	r5, r5, r1
 8005bac:	4629      	mov	r1, r5
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff ffa6 	bl	8005b00 <sbrk_aligned>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d03a      	beq.n	8005c2e <_malloc_r+0xea>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	442b      	add	r3, r5
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	bb62      	cbnz	r2, 8005c20 <_malloc_r+0xdc>
 8005bc6:	f8c8 7000 	str.w	r7, [r8]
 8005bca:	e00f      	b.n	8005bec <_malloc_r+0xa8>
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	1b52      	subs	r2, r2, r5
 8005bd0:	d420      	bmi.n	8005c14 <_malloc_r+0xd0>
 8005bd2:	2a0b      	cmp	r2, #11
 8005bd4:	d917      	bls.n	8005c06 <_malloc_r+0xc2>
 8005bd6:	1961      	adds	r1, r4, r5
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	6025      	str	r5, [r4, #0]
 8005bdc:	bf18      	it	ne
 8005bde:	6059      	strne	r1, [r3, #4]
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	bf08      	it	eq
 8005be4:	f8c8 1000 	streq.w	r1, [r8]
 8005be8:	5162      	str	r2, [r4, r5]
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 f82f 	bl	8005c50 <__malloc_unlock>
 8005bf2:	f104 000b 	add.w	r0, r4, #11
 8005bf6:	1d23      	adds	r3, r4, #4
 8005bf8:	f020 0007 	bic.w	r0, r0, #7
 8005bfc:	1ac2      	subs	r2, r0, r3
 8005bfe:	bf1c      	itt	ne
 8005c00:	1a1b      	subne	r3, r3, r0
 8005c02:	50a3      	strne	r3, [r4, r2]
 8005c04:	e7af      	b.n	8005b66 <_malloc_r+0x22>
 8005c06:	6862      	ldr	r2, [r4, #4]
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	bf0c      	ite	eq
 8005c0c:	f8c8 2000 	streq.w	r2, [r8]
 8005c10:	605a      	strne	r2, [r3, #4]
 8005c12:	e7eb      	b.n	8005bec <_malloc_r+0xa8>
 8005c14:	4623      	mov	r3, r4
 8005c16:	6864      	ldr	r4, [r4, #4]
 8005c18:	e7ae      	b.n	8005b78 <_malloc_r+0x34>
 8005c1a:	463c      	mov	r4, r7
 8005c1c:	687f      	ldr	r7, [r7, #4]
 8005c1e:	e7b6      	b.n	8005b8e <_malloc_r+0x4a>
 8005c20:	461a      	mov	r2, r3
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d1fb      	bne.n	8005c20 <_malloc_r+0xdc>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	6053      	str	r3, [r2, #4]
 8005c2c:	e7de      	b.n	8005bec <_malloc_r+0xa8>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	6033      	str	r3, [r6, #0]
 8005c32:	4630      	mov	r0, r6
 8005c34:	f000 f80c 	bl	8005c50 <__malloc_unlock>
 8005c38:	e794      	b.n	8005b64 <_malloc_r+0x20>
 8005c3a:	6005      	str	r5, [r0, #0]
 8005c3c:	e7d6      	b.n	8005bec <_malloc_r+0xa8>
 8005c3e:	bf00      	nop
 8005c40:	20000318 	.word	0x20000318

08005c44 <__malloc_lock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	@ (8005c4c <__malloc_lock+0x8>)
 8005c46:	f7ff bf0e 	b.w	8005a66 <__retarget_lock_acquire_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20000310 	.word	0x20000310

08005c50 <__malloc_unlock>:
 8005c50:	4801      	ldr	r0, [pc, #4]	@ (8005c58 <__malloc_unlock+0x8>)
 8005c52:	f7ff bf09 	b.w	8005a68 <__retarget_lock_release_recursive>
 8005c56:	bf00      	nop
 8005c58:	20000310 	.word	0x20000310

08005c5c <__sfputc_r>:
 8005c5c:	6893      	ldr	r3, [r2, #8]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	b410      	push	{r4}
 8005c64:	6093      	str	r3, [r2, #8]
 8005c66:	da08      	bge.n	8005c7a <__sfputc_r+0x1e>
 8005c68:	6994      	ldr	r4, [r2, #24]
 8005c6a:	42a3      	cmp	r3, r4
 8005c6c:	db01      	blt.n	8005c72 <__sfputc_r+0x16>
 8005c6e:	290a      	cmp	r1, #10
 8005c70:	d103      	bne.n	8005c7a <__sfputc_r+0x1e>
 8005c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c76:	f7ff bde8 	b.w	800584a <__swbuf_r>
 8005c7a:	6813      	ldr	r3, [r2, #0]
 8005c7c:	1c58      	adds	r0, r3, #1
 8005c7e:	6010      	str	r0, [r2, #0]
 8005c80:	7019      	strb	r1, [r3, #0]
 8005c82:	4608      	mov	r0, r1
 8005c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <__sfputs_r>:
 8005c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	460f      	mov	r7, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	18d5      	adds	r5, r2, r3
 8005c94:	42ac      	cmp	r4, r5
 8005c96:	d101      	bne.n	8005c9c <__sfputs_r+0x12>
 8005c98:	2000      	movs	r0, #0
 8005c9a:	e007      	b.n	8005cac <__sfputs_r+0x22>
 8005c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca0:	463a      	mov	r2, r7
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ffda 	bl	8005c5c <__sfputc_r>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d1f3      	bne.n	8005c94 <__sfputs_r+0xa>
 8005cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cb0 <_vfiprintf_r>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	b09d      	sub	sp, #116	@ 0x74
 8005cb8:	4614      	mov	r4, r2
 8005cba:	4698      	mov	r8, r3
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	b118      	cbz	r0, 8005cc8 <_vfiprintf_r+0x18>
 8005cc0:	6a03      	ldr	r3, [r0, #32]
 8005cc2:	b90b      	cbnz	r3, 8005cc8 <_vfiprintf_r+0x18>
 8005cc4:	f7ff fcd8 	bl	8005678 <__sinit>
 8005cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cca:	07d9      	lsls	r1, r3, #31
 8005ccc:	d405      	bmi.n	8005cda <_vfiprintf_r+0x2a>
 8005cce:	89ab      	ldrh	r3, [r5, #12]
 8005cd0:	059a      	lsls	r2, r3, #22
 8005cd2:	d402      	bmi.n	8005cda <_vfiprintf_r+0x2a>
 8005cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cd6:	f7ff fec6 	bl	8005a66 <__retarget_lock_acquire_recursive>
 8005cda:	89ab      	ldrh	r3, [r5, #12]
 8005cdc:	071b      	lsls	r3, r3, #28
 8005cde:	d501      	bpl.n	8005ce4 <_vfiprintf_r+0x34>
 8005ce0:	692b      	ldr	r3, [r5, #16]
 8005ce2:	b99b      	cbnz	r3, 8005d0c <_vfiprintf_r+0x5c>
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7ff fdee 	bl	80058c8 <__swsetup_r>
 8005cec:	b170      	cbz	r0, 8005d0c <_vfiprintf_r+0x5c>
 8005cee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cf0:	07dc      	lsls	r4, r3, #31
 8005cf2:	d504      	bpl.n	8005cfe <_vfiprintf_r+0x4e>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	b01d      	add	sp, #116	@ 0x74
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfe:	89ab      	ldrh	r3, [r5, #12]
 8005d00:	0598      	lsls	r0, r3, #22
 8005d02:	d4f7      	bmi.n	8005cf4 <_vfiprintf_r+0x44>
 8005d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d06:	f7ff feaf 	bl	8005a68 <__retarget_lock_release_recursive>
 8005d0a:	e7f3      	b.n	8005cf4 <_vfiprintf_r+0x44>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d10:	2320      	movs	r3, #32
 8005d12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d1a:	2330      	movs	r3, #48	@ 0x30
 8005d1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ecc <_vfiprintf_r+0x21c>
 8005d20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d24:	f04f 0901 	mov.w	r9, #1
 8005d28:	4623      	mov	r3, r4
 8005d2a:	469a      	mov	sl, r3
 8005d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d30:	b10a      	cbz	r2, 8005d36 <_vfiprintf_r+0x86>
 8005d32:	2a25      	cmp	r2, #37	@ 0x25
 8005d34:	d1f9      	bne.n	8005d2a <_vfiprintf_r+0x7a>
 8005d36:	ebba 0b04 	subs.w	fp, sl, r4
 8005d3a:	d00b      	beq.n	8005d54 <_vfiprintf_r+0xa4>
 8005d3c:	465b      	mov	r3, fp
 8005d3e:	4622      	mov	r2, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7ff ffa1 	bl	8005c8a <__sfputs_r>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f000 80a7 	beq.w	8005e9c <_vfiprintf_r+0x1ec>
 8005d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d50:	445a      	add	r2, fp
 8005d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d54:	f89a 3000 	ldrb.w	r3, [sl]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 809f 	beq.w	8005e9c <_vfiprintf_r+0x1ec>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f04f 32ff 	mov.w	r2, #4294967295
 8005d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d68:	f10a 0a01 	add.w	sl, sl, #1
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	9307      	str	r3, [sp, #28]
 8005d70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d74:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d76:	4654      	mov	r4, sl
 8005d78:	2205      	movs	r2, #5
 8005d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d7e:	4853      	ldr	r0, [pc, #332]	@ (8005ecc <_vfiprintf_r+0x21c>)
 8005d80:	f7fa fa4e 	bl	8000220 <memchr>
 8005d84:	9a04      	ldr	r2, [sp, #16]
 8005d86:	b9d8      	cbnz	r0, 8005dc0 <_vfiprintf_r+0x110>
 8005d88:	06d1      	lsls	r1, r2, #27
 8005d8a:	bf44      	itt	mi
 8005d8c:	2320      	movmi	r3, #32
 8005d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d92:	0713      	lsls	r3, r2, #28
 8005d94:	bf44      	itt	mi
 8005d96:	232b      	movmi	r3, #43	@ 0x2b
 8005d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005da2:	d015      	beq.n	8005dd0 <_vfiprintf_r+0x120>
 8005da4:	9a07      	ldr	r2, [sp, #28]
 8005da6:	4654      	mov	r4, sl
 8005da8:	2000      	movs	r0, #0
 8005daa:	f04f 0c0a 	mov.w	ip, #10
 8005dae:	4621      	mov	r1, r4
 8005db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005db4:	3b30      	subs	r3, #48	@ 0x30
 8005db6:	2b09      	cmp	r3, #9
 8005db8:	d94b      	bls.n	8005e52 <_vfiprintf_r+0x1a2>
 8005dba:	b1b0      	cbz	r0, 8005dea <_vfiprintf_r+0x13a>
 8005dbc:	9207      	str	r2, [sp, #28]
 8005dbe:	e014      	b.n	8005dea <_vfiprintf_r+0x13a>
 8005dc0:	eba0 0308 	sub.w	r3, r0, r8
 8005dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	46a2      	mov	sl, r4
 8005dce:	e7d2      	b.n	8005d76 <_vfiprintf_r+0xc6>
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	1d19      	adds	r1, r3, #4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	9103      	str	r1, [sp, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bfbb      	ittet	lt
 8005ddc:	425b      	neglt	r3, r3
 8005dde:	f042 0202 	orrlt.w	r2, r2, #2
 8005de2:	9307      	strge	r3, [sp, #28]
 8005de4:	9307      	strlt	r3, [sp, #28]
 8005de6:	bfb8      	it	lt
 8005de8:	9204      	strlt	r2, [sp, #16]
 8005dea:	7823      	ldrb	r3, [r4, #0]
 8005dec:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dee:	d10a      	bne.n	8005e06 <_vfiprintf_r+0x156>
 8005df0:	7863      	ldrb	r3, [r4, #1]
 8005df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005df4:	d132      	bne.n	8005e5c <_vfiprintf_r+0x1ac>
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	1d1a      	adds	r2, r3, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	9203      	str	r2, [sp, #12]
 8005dfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e02:	3402      	adds	r4, #2
 8005e04:	9305      	str	r3, [sp, #20]
 8005e06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005edc <_vfiprintf_r+0x22c>
 8005e0a:	7821      	ldrb	r1, [r4, #0]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	4650      	mov	r0, sl
 8005e10:	f7fa fa06 	bl	8000220 <memchr>
 8005e14:	b138      	cbz	r0, 8005e26 <_vfiprintf_r+0x176>
 8005e16:	9b04      	ldr	r3, [sp, #16]
 8005e18:	eba0 000a 	sub.w	r0, r0, sl
 8005e1c:	2240      	movs	r2, #64	@ 0x40
 8005e1e:	4082      	lsls	r2, r0
 8005e20:	4313      	orrs	r3, r2
 8005e22:	3401      	adds	r4, #1
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2a:	4829      	ldr	r0, [pc, #164]	@ (8005ed0 <_vfiprintf_r+0x220>)
 8005e2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e30:	2206      	movs	r2, #6
 8005e32:	f7fa f9f5 	bl	8000220 <memchr>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d03f      	beq.n	8005eba <_vfiprintf_r+0x20a>
 8005e3a:	4b26      	ldr	r3, [pc, #152]	@ (8005ed4 <_vfiprintf_r+0x224>)
 8005e3c:	bb1b      	cbnz	r3, 8005e86 <_vfiprintf_r+0x1d6>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	3307      	adds	r3, #7
 8005e42:	f023 0307 	bic.w	r3, r3, #7
 8005e46:	3308      	adds	r3, #8
 8005e48:	9303      	str	r3, [sp, #12]
 8005e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4c:	443b      	add	r3, r7
 8005e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e50:	e76a      	b.n	8005d28 <_vfiprintf_r+0x78>
 8005e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e56:	460c      	mov	r4, r1
 8005e58:	2001      	movs	r0, #1
 8005e5a:	e7a8      	b.n	8005dae <_vfiprintf_r+0xfe>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	3401      	adds	r4, #1
 8005e60:	9305      	str	r3, [sp, #20]
 8005e62:	4619      	mov	r1, r3
 8005e64:	f04f 0c0a 	mov.w	ip, #10
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e6e:	3a30      	subs	r2, #48	@ 0x30
 8005e70:	2a09      	cmp	r2, #9
 8005e72:	d903      	bls.n	8005e7c <_vfiprintf_r+0x1cc>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0c6      	beq.n	8005e06 <_vfiprintf_r+0x156>
 8005e78:	9105      	str	r1, [sp, #20]
 8005e7a:	e7c4      	b.n	8005e06 <_vfiprintf_r+0x156>
 8005e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e80:	4604      	mov	r4, r0
 8005e82:	2301      	movs	r3, #1
 8005e84:	e7f0      	b.n	8005e68 <_vfiprintf_r+0x1b8>
 8005e86:	ab03      	add	r3, sp, #12
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	4b12      	ldr	r3, [pc, #72]	@ (8005ed8 <_vfiprintf_r+0x228>)
 8005e8e:	a904      	add	r1, sp, #16
 8005e90:	4630      	mov	r0, r6
 8005e92:	f3af 8000 	nop.w
 8005e96:	4607      	mov	r7, r0
 8005e98:	1c78      	adds	r0, r7, #1
 8005e9a:	d1d6      	bne.n	8005e4a <_vfiprintf_r+0x19a>
 8005e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e9e:	07d9      	lsls	r1, r3, #31
 8005ea0:	d405      	bmi.n	8005eae <_vfiprintf_r+0x1fe>
 8005ea2:	89ab      	ldrh	r3, [r5, #12]
 8005ea4:	059a      	lsls	r2, r3, #22
 8005ea6:	d402      	bmi.n	8005eae <_vfiprintf_r+0x1fe>
 8005ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005eaa:	f7ff fddd 	bl	8005a68 <__retarget_lock_release_recursive>
 8005eae:	89ab      	ldrh	r3, [r5, #12]
 8005eb0:	065b      	lsls	r3, r3, #25
 8005eb2:	f53f af1f 	bmi.w	8005cf4 <_vfiprintf_r+0x44>
 8005eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eb8:	e71e      	b.n	8005cf8 <_vfiprintf_r+0x48>
 8005eba:	ab03      	add	r3, sp, #12
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	462a      	mov	r2, r5
 8005ec0:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <_vfiprintf_r+0x228>)
 8005ec2:	a904      	add	r1, sp, #16
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f000 f879 	bl	8005fbc <_printf_i>
 8005eca:	e7e4      	b.n	8005e96 <_vfiprintf_r+0x1e6>
 8005ecc:	08006514 	.word	0x08006514
 8005ed0:	0800651e 	.word	0x0800651e
 8005ed4:	00000000 	.word	0x00000000
 8005ed8:	08005c8b 	.word	0x08005c8b
 8005edc:	0800651a 	.word	0x0800651a

08005ee0 <_printf_common>:
 8005ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	4616      	mov	r6, r2
 8005ee6:	4698      	mov	r8, r3
 8005ee8:	688a      	ldr	r2, [r1, #8]
 8005eea:	690b      	ldr	r3, [r1, #16]
 8005eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	bfb8      	it	lt
 8005ef4:	4613      	movlt	r3, r2
 8005ef6:	6033      	str	r3, [r6, #0]
 8005ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005efc:	4607      	mov	r7, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	b10a      	cbz	r2, 8005f06 <_printf_common+0x26>
 8005f02:	3301      	adds	r3, #1
 8005f04:	6033      	str	r3, [r6, #0]
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	0699      	lsls	r1, r3, #26
 8005f0a:	bf42      	ittt	mi
 8005f0c:	6833      	ldrmi	r3, [r6, #0]
 8005f0e:	3302      	addmi	r3, #2
 8005f10:	6033      	strmi	r3, [r6, #0]
 8005f12:	6825      	ldr	r5, [r4, #0]
 8005f14:	f015 0506 	ands.w	r5, r5, #6
 8005f18:	d106      	bne.n	8005f28 <_printf_common+0x48>
 8005f1a:	f104 0a19 	add.w	sl, r4, #25
 8005f1e:	68e3      	ldr	r3, [r4, #12]
 8005f20:	6832      	ldr	r2, [r6, #0]
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	42ab      	cmp	r3, r5
 8005f26:	dc26      	bgt.n	8005f76 <_printf_common+0x96>
 8005f28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	3b00      	subs	r3, #0
 8005f30:	bf18      	it	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	0692      	lsls	r2, r2, #26
 8005f36:	d42b      	bmi.n	8005f90 <_printf_common+0xb0>
 8005f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	4638      	mov	r0, r7
 8005f40:	47c8      	blx	r9
 8005f42:	3001      	adds	r0, #1
 8005f44:	d01e      	beq.n	8005f84 <_printf_common+0xa4>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	6922      	ldr	r2, [r4, #16]
 8005f4a:	f003 0306 	and.w	r3, r3, #6
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	bf02      	ittt	eq
 8005f52:	68e5      	ldreq	r5, [r4, #12]
 8005f54:	6833      	ldreq	r3, [r6, #0]
 8005f56:	1aed      	subeq	r5, r5, r3
 8005f58:	68a3      	ldr	r3, [r4, #8]
 8005f5a:	bf0c      	ite	eq
 8005f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f60:	2500      	movne	r5, #0
 8005f62:	4293      	cmp	r3, r2
 8005f64:	bfc4      	itt	gt
 8005f66:	1a9b      	subgt	r3, r3, r2
 8005f68:	18ed      	addgt	r5, r5, r3
 8005f6a:	2600      	movs	r6, #0
 8005f6c:	341a      	adds	r4, #26
 8005f6e:	42b5      	cmp	r5, r6
 8005f70:	d11a      	bne.n	8005fa8 <_printf_common+0xc8>
 8005f72:	2000      	movs	r0, #0
 8005f74:	e008      	b.n	8005f88 <_printf_common+0xa8>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4652      	mov	r2, sl
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	47c8      	blx	r9
 8005f80:	3001      	adds	r0, #1
 8005f82:	d103      	bne.n	8005f8c <_printf_common+0xac>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	e7c6      	b.n	8005f1e <_printf_common+0x3e>
 8005f90:	18e1      	adds	r1, r4, r3
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	2030      	movs	r0, #48	@ 0x30
 8005f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f9a:	4422      	add	r2, r4
 8005f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	e7c7      	b.n	8005f38 <_printf_common+0x58>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4622      	mov	r2, r4
 8005fac:	4641      	mov	r1, r8
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c8      	blx	r9
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d0e6      	beq.n	8005f84 <_printf_common+0xa4>
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	e7d9      	b.n	8005f6e <_printf_common+0x8e>
	...

08005fbc <_printf_i>:
 8005fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	7e0f      	ldrb	r7, [r1, #24]
 8005fc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fc4:	2f78      	cmp	r7, #120	@ 0x78
 8005fc6:	4691      	mov	r9, r2
 8005fc8:	4680      	mov	r8, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	469a      	mov	sl, r3
 8005fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fd2:	d807      	bhi.n	8005fe4 <_printf_i+0x28>
 8005fd4:	2f62      	cmp	r7, #98	@ 0x62
 8005fd6:	d80a      	bhi.n	8005fee <_printf_i+0x32>
 8005fd8:	2f00      	cmp	r7, #0
 8005fda:	f000 80d1 	beq.w	8006180 <_printf_i+0x1c4>
 8005fde:	2f58      	cmp	r7, #88	@ 0x58
 8005fe0:	f000 80b8 	beq.w	8006154 <_printf_i+0x198>
 8005fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fec:	e03a      	b.n	8006064 <_printf_i+0xa8>
 8005fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ff2:	2b15      	cmp	r3, #21
 8005ff4:	d8f6      	bhi.n	8005fe4 <_printf_i+0x28>
 8005ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ffc <_printf_i+0x40>)
 8005ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ffc:	08006055 	.word	0x08006055
 8006000:	08006069 	.word	0x08006069
 8006004:	08005fe5 	.word	0x08005fe5
 8006008:	08005fe5 	.word	0x08005fe5
 800600c:	08005fe5 	.word	0x08005fe5
 8006010:	08005fe5 	.word	0x08005fe5
 8006014:	08006069 	.word	0x08006069
 8006018:	08005fe5 	.word	0x08005fe5
 800601c:	08005fe5 	.word	0x08005fe5
 8006020:	08005fe5 	.word	0x08005fe5
 8006024:	08005fe5 	.word	0x08005fe5
 8006028:	08006167 	.word	0x08006167
 800602c:	08006093 	.word	0x08006093
 8006030:	08006121 	.word	0x08006121
 8006034:	08005fe5 	.word	0x08005fe5
 8006038:	08005fe5 	.word	0x08005fe5
 800603c:	08006189 	.word	0x08006189
 8006040:	08005fe5 	.word	0x08005fe5
 8006044:	08006093 	.word	0x08006093
 8006048:	08005fe5 	.word	0x08005fe5
 800604c:	08005fe5 	.word	0x08005fe5
 8006050:	08006129 	.word	0x08006129
 8006054:	6833      	ldr	r3, [r6, #0]
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6032      	str	r2, [r6, #0]
 800605c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006064:	2301      	movs	r3, #1
 8006066:	e09c      	b.n	80061a2 <_printf_i+0x1e6>
 8006068:	6833      	ldr	r3, [r6, #0]
 800606a:	6820      	ldr	r0, [r4, #0]
 800606c:	1d19      	adds	r1, r3, #4
 800606e:	6031      	str	r1, [r6, #0]
 8006070:	0606      	lsls	r6, r0, #24
 8006072:	d501      	bpl.n	8006078 <_printf_i+0xbc>
 8006074:	681d      	ldr	r5, [r3, #0]
 8006076:	e003      	b.n	8006080 <_printf_i+0xc4>
 8006078:	0645      	lsls	r5, r0, #25
 800607a:	d5fb      	bpl.n	8006074 <_printf_i+0xb8>
 800607c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006080:	2d00      	cmp	r5, #0
 8006082:	da03      	bge.n	800608c <_printf_i+0xd0>
 8006084:	232d      	movs	r3, #45	@ 0x2d
 8006086:	426d      	negs	r5, r5
 8006088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800608c:	4858      	ldr	r0, [pc, #352]	@ (80061f0 <_printf_i+0x234>)
 800608e:	230a      	movs	r3, #10
 8006090:	e011      	b.n	80060b6 <_printf_i+0xfa>
 8006092:	6821      	ldr	r1, [r4, #0]
 8006094:	6833      	ldr	r3, [r6, #0]
 8006096:	0608      	lsls	r0, r1, #24
 8006098:	f853 5b04 	ldr.w	r5, [r3], #4
 800609c:	d402      	bmi.n	80060a4 <_printf_i+0xe8>
 800609e:	0649      	lsls	r1, r1, #25
 80060a0:	bf48      	it	mi
 80060a2:	b2ad      	uxthmi	r5, r5
 80060a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060a6:	4852      	ldr	r0, [pc, #328]	@ (80061f0 <_printf_i+0x234>)
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	bf14      	ite	ne
 80060ac:	230a      	movne	r3, #10
 80060ae:	2308      	moveq	r3, #8
 80060b0:	2100      	movs	r1, #0
 80060b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060b6:	6866      	ldr	r6, [r4, #4]
 80060b8:	60a6      	str	r6, [r4, #8]
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	db05      	blt.n	80060ca <_printf_i+0x10e>
 80060be:	6821      	ldr	r1, [r4, #0]
 80060c0:	432e      	orrs	r6, r5
 80060c2:	f021 0104 	bic.w	r1, r1, #4
 80060c6:	6021      	str	r1, [r4, #0]
 80060c8:	d04b      	beq.n	8006162 <_printf_i+0x1a6>
 80060ca:	4616      	mov	r6, r2
 80060cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80060d0:	fb03 5711 	mls	r7, r3, r1, r5
 80060d4:	5dc7      	ldrb	r7, [r0, r7]
 80060d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060da:	462f      	mov	r7, r5
 80060dc:	42bb      	cmp	r3, r7
 80060de:	460d      	mov	r5, r1
 80060e0:	d9f4      	bls.n	80060cc <_printf_i+0x110>
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d10b      	bne.n	80060fe <_printf_i+0x142>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	07df      	lsls	r7, r3, #31
 80060ea:	d508      	bpl.n	80060fe <_printf_i+0x142>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	6861      	ldr	r1, [r4, #4]
 80060f0:	4299      	cmp	r1, r3
 80060f2:	bfde      	ittt	le
 80060f4:	2330      	movle	r3, #48	@ 0x30
 80060f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060fe:	1b92      	subs	r2, r2, r6
 8006100:	6122      	str	r2, [r4, #16]
 8006102:	f8cd a000 	str.w	sl, [sp]
 8006106:	464b      	mov	r3, r9
 8006108:	aa03      	add	r2, sp, #12
 800610a:	4621      	mov	r1, r4
 800610c:	4640      	mov	r0, r8
 800610e:	f7ff fee7 	bl	8005ee0 <_printf_common>
 8006112:	3001      	adds	r0, #1
 8006114:	d14a      	bne.n	80061ac <_printf_i+0x1f0>
 8006116:	f04f 30ff 	mov.w	r0, #4294967295
 800611a:	b004      	add	sp, #16
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	f043 0320 	orr.w	r3, r3, #32
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	4832      	ldr	r0, [pc, #200]	@ (80061f4 <_printf_i+0x238>)
 800612a:	2778      	movs	r7, #120	@ 0x78
 800612c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	6831      	ldr	r1, [r6, #0]
 8006134:	061f      	lsls	r7, r3, #24
 8006136:	f851 5b04 	ldr.w	r5, [r1], #4
 800613a:	d402      	bmi.n	8006142 <_printf_i+0x186>
 800613c:	065f      	lsls	r7, r3, #25
 800613e:	bf48      	it	mi
 8006140:	b2ad      	uxthmi	r5, r5
 8006142:	6031      	str	r1, [r6, #0]
 8006144:	07d9      	lsls	r1, r3, #31
 8006146:	bf44      	itt	mi
 8006148:	f043 0320 	orrmi.w	r3, r3, #32
 800614c:	6023      	strmi	r3, [r4, #0]
 800614e:	b11d      	cbz	r5, 8006158 <_printf_i+0x19c>
 8006150:	2310      	movs	r3, #16
 8006152:	e7ad      	b.n	80060b0 <_printf_i+0xf4>
 8006154:	4826      	ldr	r0, [pc, #152]	@ (80061f0 <_printf_i+0x234>)
 8006156:	e7e9      	b.n	800612c <_printf_i+0x170>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	f023 0320 	bic.w	r3, r3, #32
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	e7f6      	b.n	8006150 <_printf_i+0x194>
 8006162:	4616      	mov	r6, r2
 8006164:	e7bd      	b.n	80060e2 <_printf_i+0x126>
 8006166:	6833      	ldr	r3, [r6, #0]
 8006168:	6825      	ldr	r5, [r4, #0]
 800616a:	6961      	ldr	r1, [r4, #20]
 800616c:	1d18      	adds	r0, r3, #4
 800616e:	6030      	str	r0, [r6, #0]
 8006170:	062e      	lsls	r6, r5, #24
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	d501      	bpl.n	800617a <_printf_i+0x1be>
 8006176:	6019      	str	r1, [r3, #0]
 8006178:	e002      	b.n	8006180 <_printf_i+0x1c4>
 800617a:	0668      	lsls	r0, r5, #25
 800617c:	d5fb      	bpl.n	8006176 <_printf_i+0x1ba>
 800617e:	8019      	strh	r1, [r3, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	6123      	str	r3, [r4, #16]
 8006184:	4616      	mov	r6, r2
 8006186:	e7bc      	b.n	8006102 <_printf_i+0x146>
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	1d1a      	adds	r2, r3, #4
 800618c:	6032      	str	r2, [r6, #0]
 800618e:	681e      	ldr	r6, [r3, #0]
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	2100      	movs	r1, #0
 8006194:	4630      	mov	r0, r6
 8006196:	f7fa f843 	bl	8000220 <memchr>
 800619a:	b108      	cbz	r0, 80061a0 <_printf_i+0x1e4>
 800619c:	1b80      	subs	r0, r0, r6
 800619e:	6060      	str	r0, [r4, #4]
 80061a0:	6863      	ldr	r3, [r4, #4]
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	2300      	movs	r3, #0
 80061a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061aa:	e7aa      	b.n	8006102 <_printf_i+0x146>
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	4632      	mov	r2, r6
 80061b0:	4649      	mov	r1, r9
 80061b2:	4640      	mov	r0, r8
 80061b4:	47d0      	blx	sl
 80061b6:	3001      	adds	r0, #1
 80061b8:	d0ad      	beq.n	8006116 <_printf_i+0x15a>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	079b      	lsls	r3, r3, #30
 80061be:	d413      	bmi.n	80061e8 <_printf_i+0x22c>
 80061c0:	68e0      	ldr	r0, [r4, #12]
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	4298      	cmp	r0, r3
 80061c6:	bfb8      	it	lt
 80061c8:	4618      	movlt	r0, r3
 80061ca:	e7a6      	b.n	800611a <_printf_i+0x15e>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4632      	mov	r2, r6
 80061d0:	4649      	mov	r1, r9
 80061d2:	4640      	mov	r0, r8
 80061d4:	47d0      	blx	sl
 80061d6:	3001      	adds	r0, #1
 80061d8:	d09d      	beq.n	8006116 <_printf_i+0x15a>
 80061da:	3501      	adds	r5, #1
 80061dc:	68e3      	ldr	r3, [r4, #12]
 80061de:	9903      	ldr	r1, [sp, #12]
 80061e0:	1a5b      	subs	r3, r3, r1
 80061e2:	42ab      	cmp	r3, r5
 80061e4:	dcf2      	bgt.n	80061cc <_printf_i+0x210>
 80061e6:	e7eb      	b.n	80061c0 <_printf_i+0x204>
 80061e8:	2500      	movs	r5, #0
 80061ea:	f104 0619 	add.w	r6, r4, #25
 80061ee:	e7f5      	b.n	80061dc <_printf_i+0x220>
 80061f0:	08006525 	.word	0x08006525
 80061f4:	08006536 	.word	0x08006536

080061f8 <__sflush_r>:
 80061f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006200:	0716      	lsls	r6, r2, #28
 8006202:	4605      	mov	r5, r0
 8006204:	460c      	mov	r4, r1
 8006206:	d454      	bmi.n	80062b2 <__sflush_r+0xba>
 8006208:	684b      	ldr	r3, [r1, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	dc02      	bgt.n	8006214 <__sflush_r+0x1c>
 800620e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	dd48      	ble.n	80062a6 <__sflush_r+0xae>
 8006214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006216:	2e00      	cmp	r6, #0
 8006218:	d045      	beq.n	80062a6 <__sflush_r+0xae>
 800621a:	2300      	movs	r3, #0
 800621c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006220:	682f      	ldr	r7, [r5, #0]
 8006222:	6a21      	ldr	r1, [r4, #32]
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	d030      	beq.n	800628a <__sflush_r+0x92>
 8006228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	0759      	lsls	r1, r3, #29
 800622e:	d505      	bpl.n	800623c <__sflush_r+0x44>
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006236:	b10b      	cbz	r3, 800623c <__sflush_r+0x44>
 8006238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006240:	6a21      	ldr	r1, [r4, #32]
 8006242:	4628      	mov	r0, r5
 8006244:	47b0      	blx	r6
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	d106      	bne.n	800625a <__sflush_r+0x62>
 800624c:	6829      	ldr	r1, [r5, #0]
 800624e:	291d      	cmp	r1, #29
 8006250:	d82b      	bhi.n	80062aa <__sflush_r+0xb2>
 8006252:	4a2a      	ldr	r2, [pc, #168]	@ (80062fc <__sflush_r+0x104>)
 8006254:	40ca      	lsrs	r2, r1
 8006256:	07d6      	lsls	r6, r2, #31
 8006258:	d527      	bpl.n	80062aa <__sflush_r+0xb2>
 800625a:	2200      	movs	r2, #0
 800625c:	6062      	str	r2, [r4, #4]
 800625e:	04d9      	lsls	r1, r3, #19
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	6022      	str	r2, [r4, #0]
 8006264:	d504      	bpl.n	8006270 <__sflush_r+0x78>
 8006266:	1c42      	adds	r2, r0, #1
 8006268:	d101      	bne.n	800626e <__sflush_r+0x76>
 800626a:	682b      	ldr	r3, [r5, #0]
 800626c:	b903      	cbnz	r3, 8006270 <__sflush_r+0x78>
 800626e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006272:	602f      	str	r7, [r5, #0]
 8006274:	b1b9      	cbz	r1, 80062a6 <__sflush_r+0xae>
 8006276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800627a:	4299      	cmp	r1, r3
 800627c:	d002      	beq.n	8006284 <__sflush_r+0x8c>
 800627e:	4628      	mov	r0, r5
 8006280:	f7ff fbf4 	bl	8005a6c <_free_r>
 8006284:	2300      	movs	r3, #0
 8006286:	6363      	str	r3, [r4, #52]	@ 0x34
 8006288:	e00d      	b.n	80062a6 <__sflush_r+0xae>
 800628a:	2301      	movs	r3, #1
 800628c:	4628      	mov	r0, r5
 800628e:	47b0      	blx	r6
 8006290:	4602      	mov	r2, r0
 8006292:	1c50      	adds	r0, r2, #1
 8006294:	d1c9      	bne.n	800622a <__sflush_r+0x32>
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0c6      	beq.n	800622a <__sflush_r+0x32>
 800629c:	2b1d      	cmp	r3, #29
 800629e:	d001      	beq.n	80062a4 <__sflush_r+0xac>
 80062a0:	2b16      	cmp	r3, #22
 80062a2:	d11e      	bne.n	80062e2 <__sflush_r+0xea>
 80062a4:	602f      	str	r7, [r5, #0]
 80062a6:	2000      	movs	r0, #0
 80062a8:	e022      	b.n	80062f0 <__sflush_r+0xf8>
 80062aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	e01b      	b.n	80062ea <__sflush_r+0xf2>
 80062b2:	690f      	ldr	r7, [r1, #16]
 80062b4:	2f00      	cmp	r7, #0
 80062b6:	d0f6      	beq.n	80062a6 <__sflush_r+0xae>
 80062b8:	0793      	lsls	r3, r2, #30
 80062ba:	680e      	ldr	r6, [r1, #0]
 80062bc:	bf08      	it	eq
 80062be:	694b      	ldreq	r3, [r1, #20]
 80062c0:	600f      	str	r7, [r1, #0]
 80062c2:	bf18      	it	ne
 80062c4:	2300      	movne	r3, #0
 80062c6:	eba6 0807 	sub.w	r8, r6, r7
 80062ca:	608b      	str	r3, [r1, #8]
 80062cc:	f1b8 0f00 	cmp.w	r8, #0
 80062d0:	dde9      	ble.n	80062a6 <__sflush_r+0xae>
 80062d2:	6a21      	ldr	r1, [r4, #32]
 80062d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062d6:	4643      	mov	r3, r8
 80062d8:	463a      	mov	r2, r7
 80062da:	4628      	mov	r0, r5
 80062dc:	47b0      	blx	r6
 80062de:	2800      	cmp	r0, #0
 80062e0:	dc08      	bgt.n	80062f4 <__sflush_r+0xfc>
 80062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295
 80062f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f4:	4407      	add	r7, r0
 80062f6:	eba8 0800 	sub.w	r8, r8, r0
 80062fa:	e7e7      	b.n	80062cc <__sflush_r+0xd4>
 80062fc:	20400001 	.word	0x20400001

08006300 <_fflush_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	690b      	ldr	r3, [r1, #16]
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	b913      	cbnz	r3, 8006310 <_fflush_r+0x10>
 800630a:	2500      	movs	r5, #0
 800630c:	4628      	mov	r0, r5
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	b118      	cbz	r0, 800631a <_fflush_r+0x1a>
 8006312:	6a03      	ldr	r3, [r0, #32]
 8006314:	b90b      	cbnz	r3, 800631a <_fflush_r+0x1a>
 8006316:	f7ff f9af 	bl	8005678 <__sinit>
 800631a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f3      	beq.n	800630a <_fflush_r+0xa>
 8006322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006324:	07d0      	lsls	r0, r2, #31
 8006326:	d404      	bmi.n	8006332 <_fflush_r+0x32>
 8006328:	0599      	lsls	r1, r3, #22
 800632a:	d402      	bmi.n	8006332 <_fflush_r+0x32>
 800632c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800632e:	f7ff fb9a 	bl	8005a66 <__retarget_lock_acquire_recursive>
 8006332:	4628      	mov	r0, r5
 8006334:	4621      	mov	r1, r4
 8006336:	f7ff ff5f 	bl	80061f8 <__sflush_r>
 800633a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800633c:	07da      	lsls	r2, r3, #31
 800633e:	4605      	mov	r5, r0
 8006340:	d4e4      	bmi.n	800630c <_fflush_r+0xc>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	059b      	lsls	r3, r3, #22
 8006346:	d4e1      	bmi.n	800630c <_fflush_r+0xc>
 8006348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800634a:	f7ff fb8d 	bl	8005a68 <__retarget_lock_release_recursive>
 800634e:	e7dd      	b.n	800630c <_fflush_r+0xc>

08006350 <__swhatbuf_r>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	460c      	mov	r4, r1
 8006354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006358:	2900      	cmp	r1, #0
 800635a:	b096      	sub	sp, #88	@ 0x58
 800635c:	4615      	mov	r5, r2
 800635e:	461e      	mov	r6, r3
 8006360:	da0d      	bge.n	800637e <__swhatbuf_r+0x2e>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	bf14      	ite	ne
 800636e:	2340      	movne	r3, #64	@ 0x40
 8006370:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006374:	2000      	movs	r0, #0
 8006376:	6031      	str	r1, [r6, #0]
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	b016      	add	sp, #88	@ 0x58
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	466a      	mov	r2, sp
 8006380:	f000 f848 	bl	8006414 <_fstat_r>
 8006384:	2800      	cmp	r0, #0
 8006386:	dbec      	blt.n	8006362 <__swhatbuf_r+0x12>
 8006388:	9901      	ldr	r1, [sp, #4]
 800638a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800638e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006392:	4259      	negs	r1, r3
 8006394:	4159      	adcs	r1, r3
 8006396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800639a:	e7eb      	b.n	8006374 <__swhatbuf_r+0x24>

0800639c <__smakebuf_r>:
 800639c:	898b      	ldrh	r3, [r1, #12]
 800639e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a0:	079d      	lsls	r5, r3, #30
 80063a2:	4606      	mov	r6, r0
 80063a4:	460c      	mov	r4, r1
 80063a6:	d507      	bpl.n	80063b8 <__smakebuf_r+0x1c>
 80063a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	2301      	movs	r3, #1
 80063b2:	6163      	str	r3, [r4, #20]
 80063b4:	b003      	add	sp, #12
 80063b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b8:	ab01      	add	r3, sp, #4
 80063ba:	466a      	mov	r2, sp
 80063bc:	f7ff ffc8 	bl	8006350 <__swhatbuf_r>
 80063c0:	9f00      	ldr	r7, [sp, #0]
 80063c2:	4605      	mov	r5, r0
 80063c4:	4639      	mov	r1, r7
 80063c6:	4630      	mov	r0, r6
 80063c8:	f7ff fbbc 	bl	8005b44 <_malloc_r>
 80063cc:	b948      	cbnz	r0, 80063e2 <__smakebuf_r+0x46>
 80063ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d2:	059a      	lsls	r2, r3, #22
 80063d4:	d4ee      	bmi.n	80063b4 <__smakebuf_r+0x18>
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	f043 0302 	orr.w	r3, r3, #2
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	e7e2      	b.n	80063a8 <__smakebuf_r+0xc>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	6020      	str	r0, [r4, #0]
 80063e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063f2:	b15b      	cbz	r3, 800640c <__smakebuf_r+0x70>
 80063f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 f81d 	bl	8006438 <_isatty_r>
 80063fe:	b128      	cbz	r0, 800640c <__smakebuf_r+0x70>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	431d      	orrs	r5, r3
 8006410:	81a5      	strh	r5, [r4, #12]
 8006412:	e7cf      	b.n	80063b4 <__smakebuf_r+0x18>

08006414 <_fstat_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d07      	ldr	r5, [pc, #28]	@ (8006434 <_fstat_r+0x20>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	f7fb f968 	bl	80016f6 <_fstat>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d102      	bne.n	8006430 <_fstat_r+0x1c>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	b103      	cbz	r3, 8006430 <_fstat_r+0x1c>
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	bf00      	nop
 8006434:	2000030c 	.word	0x2000030c

08006438 <_isatty_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4d06      	ldr	r5, [pc, #24]	@ (8006454 <_isatty_r+0x1c>)
 800643c:	2300      	movs	r3, #0
 800643e:	4604      	mov	r4, r0
 8006440:	4608      	mov	r0, r1
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	f7fb f967 	bl	8001716 <_isatty>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_isatty_r+0x1a>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_isatty_r+0x1a>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	2000030c 	.word	0x2000030c

08006458 <_sbrk_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d06      	ldr	r5, [pc, #24]	@ (8006474 <_sbrk_r+0x1c>)
 800645c:	2300      	movs	r3, #0
 800645e:	4604      	mov	r4, r0
 8006460:	4608      	mov	r0, r1
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	f7fb f970 	bl	8001748 <_sbrk>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_sbrk_r+0x1a>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_sbrk_r+0x1a>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	2000030c 	.word	0x2000030c

08006478 <_init>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr

08006484 <_fini>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr
